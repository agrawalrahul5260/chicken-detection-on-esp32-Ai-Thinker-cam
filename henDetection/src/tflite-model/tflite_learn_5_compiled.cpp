/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 21.07.2024 16:05:10

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 416208;
#else
constexpr int kTensorArenaSize = 415184;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,128,128,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 22504, -30304, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00021053678938187659, 0.00015741400420665741, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 43,-36,-46,127,-4,0,-48,50,108,-47,-32,-23,-19,53,-35,27,80,-75,-33,-80,80,55,60,-54,-59,-63,-31,60,7,-47,-10,103, 
  /* [1][0][][] */ 60,82,80,-121,-96,83,-9,14,-44,-29,39,112,124,46,41,-1,-45,3,-66,-99,-87,36,33,120,92,75,-53,-6,111,-120,-127,-71, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0043409718200564384, 0.0032456549815833569, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 81, 129, 137, 1217, 290, 134, -242, 26, -85, -268, 61, -4, 151, 104, -29, -349, -195, 106, -274, -263, -164, -6, -134, 134, 285, -405, -159, -301, -394, 1, -275, 1251, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.6938872401369736e-05, 4.3055519199697301e-05, 4.1297011193819344e-05, 5.2334984502522275e-05, 4.0833969251252711e-05, 4.4550444727065042e-05, 4.1784453060245141e-05, 4.4601856643566862e-05, 4.1251569200539961e-05, 5.1670034736162052e-05, 4.2428517190273851e-05, 4.4012642320012674e-05, 4.0855124098015949e-05, 4.1096511267824098e-05, 4.5322685764404014e-05, 4.273286322131753e-05, 4.0750375774223357e-05, 6.2283739680424333e-05, 4.1547460568835959e-05, 4.0254031773656607e-05, 4.1746967326616868e-05, 5.2009512728545815e-05, 4.2348354327259585e-05, 4.3360556446714327e-05, 3.9542941522086039e-05, 4.2706848034868017e-05, 3.9854690840002149e-05, 4.0369646740145981e-05, 4.1634993976913393e-05, 4.0753464418230578e-05, 4.209953112876974e-05, 5.570197754423134e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -42,-47,96,7,72,-11,-80,-100,54,-93,-99,-1,44,11,-32,45,-49,-29,-73,-50,-63,-94,3,101,-127,12,72,-43,101,-5,-19,-75,76,-59,-82,58,-101,-71,-92,26,70,-79,-89,93,49,-98,100,-17,16,-53,-43,92,-75,-51,-83,100,9,60,108,-102,-66,75,-42,40,1,14,65,87,47,87,76,-105,91,-88,38,77,-96,13,-55,20,50,16,88,-8,-54,-37,-80,94,28,108,-11,-113,14,64,29,16, 
  /* [1][0][][] */ -69,29,-71,-6,-49,81,42,-7,80,-105,-103,112,66,-20,28,61,114,-36,26,127,-41,-3,38,31,6,25,-36,111,18,14,101,-66,63,101,-3,24,55,64,-30,-63,-59,10,-20,-97,-32,38,-28,-51,-21,-76,108,65,10,79,-72,-42,8,98,68,83,-50,122,-62,-78,-51,38,79,43,112,31,18,16,-113,98,-46,46,91,-45,-38,61,-76,85,-44,-118,32,119,-66,-61,86,85,101,21,91,98,36,0, 
  /* [2][0][][] */ 36,34,-63,93,-35,-64,96,82,-105,86,-35,127,95,-9,90,-121,-56,-23,23,66,-94,-13,117,26,-57,91,113,14,-64,91,85,98,-69,-25,-90,-116,-87,102,93,-27,-118,-76,17,-6,-85,124,-24,-77,107,49,89,-85,-50,60,30,27,-96,97,-58,4,-10,68,-32,73,101,51,53,92,-91,73,8,-69,36,-71,36,28,-48,-26,9,-2,44,-98,-3,-44,4,-99,-17,-29,100,122,-18,4,-38,-80,-41,-65, 
  /* [3][0][][] */ 108,38,82,16,-13,82,-75,86,57,58,83,-12,78,80,85,38,106,88,-14,-16,95,-45,-21,-67,51,-110,-59,108,24,-95,94,38,-38,9,-1,16,-39,5,78,53,-1,-58,-56,53,83,53,-19,-48,68,-110,72,20,88,59,94,-104,-38,-86,-86,-22,-88,27,2,76,50,-10,-23,-21,-59,-44,35,77,52,-94,80,6,23,127,101,-3,-65,-81,15,103,46,70,-28,-91,-72,58,-18,-59,61,-95,-79,55, 
  /* [4][0][][] */ 67,115,10,70,4,6,40,42,78,107,0,60,33,-38,-7,-47,-20,1,-24,2,110,-85,102,34,34,-4,73,-57,-54,5,-61,-53,72,127,22,-106,-40,-2,-104,59,-47,-57,-61,-84,41,116,44,67,24,-60,-2,-84,-94,53,-95,16,94,-89,33,31,2,-67,-36,-68,-57,64,12,-33,26,-85,-86,-85,-54,20,112,71,50,-9,-1,-45,11,-40,-112,-14,8,81,103,3,-126,-77,42,50,29,104,-114,5, 
  /* [5][0][][] */ 82,-92,75,75,31,-110,30,38,100,-113,-1,-60,21,100,37,30,63,62,-80,101,36,52,18,-23,-127,-55,-12,-84,53,36,17,-96,-35,-2,-62,12,-108,-32,29,22,-82,-47,41,93,-31,24,34,-47,-101,109,16,36,37,10,39,-15,85,45,-46,-39,37,-60,40,-68,-25,100,-23,29,77,4,100,-63,-45,79,-25,-70,16,-46,14,68,106,40,33,103,-76,80,-3,40,71,-92,119,83,-11,31,76,-75, 
  /* [6][0][][] */ 21,-47,114,80,-84,-68,-4,74,-14,-85,4,-88,93,55,117,-127,40,-1,5,105,-81,-124,110,59,-68,-85,-11,-60,-29,-121,47,-82,-96,-125,-48,-107,-13,38,-101,79,86,54,21,-19,-116,104,-91,-48,-88,18,-10,-71,57,-57,94,-26,13,-13,-72,111,-98,4,64,-76,-54,66,101,-54,84,-6,-113,-7,50,-64,-94,-45,-88,-108,-60,-23,32,-30,44,-31,-75,-93,-43,-100,84,94,99,17,-53,-70,79,-33, 
  /* [7][0][][] */ 103,62,-36,-47,-75,112,-18,-12,109,1,-93,14,47,-83,45,68,52,18,-9,111,54,35,-5,84,-80,101,41,55,-73,107,-20,35,26,21,66,92,-100,85,-22,-26,93,-72,82,67,49,-2,97,-107,52,-53,-127,-61,-25,77,21,30,97,-89,7,-56,8,-8,82,-108,-65,-53,66,24,-107,18,65,84,86,20,58,57,-55,54,-95,34,89,-38,-15,-72,85,34,-107,91,81,7,84,59,-53,-37,-3,-61, 
  /* [8][0][][] */ 27,40,-45,-89,73,27,-82,-6,8,40,45,91,-8,-53,-91,-69,-76,95,-52,9,24,-28,84,111,-84,90,43,74,-80,8,-96,122,95,-29,43,3,119,1,-5,72,81,103,-117,-123,-11,-31,-25,110,18,-110,-73,-9,-72,-1,-39,-121,68,109,-104,109,106,38,40,111,-40,-51,-25,102,-98,50,32,-10,78,69,7,25,-58,111,83,91,32,82,-127,-88,24,41,74,-49,30,-44,-97,105,-93,-113,-58,60, 
  /* [9][0][][] */ 6,-14,83,31,82,-95,-44,-97,36,40,-17,59,7,-73,-85,-30,6,3,-87,-32,10,77,-98,-90,120,-5,-15,10,-1,-5,-76,86,53,2,21,-43,-84,16,-30,-51,41,-58,40,-98,67,2,-75,43,37,18,-3,-28,52,-45,-60,96,127,-58,-5,-12,-70,102,65,-59,-42,5,81,21,-3,86,94,-67,-16,78,-71,-103,-64,-118,-40,104,28,9,99,13,-39,-94,28,-9,90,23,-22,96,105,15,62,-32, 
  /* [10][0][][] */ -76,77,89,-73,-29,104,112,10,37,22,24,-62,102,90,-32,7,-32,85,-112,-52,-12,31,58,-68,3,63,-114,-112,-41,90,-94,-91,88,95,127,69,-41,8,-51,35,-33,120,-113,-42,-100,-59,-2,-58,0,13,29,18,61,13,-58,-26,-125,-18,38,-48,5,88,116,42,126,-75,-97,-22,31,-20,-96,-62,88,72,-83,106,-7,64,69,10,82,-1,66,102,-101,70,105,-22,43,12,2,-84,-46,-42,-37,-64, 
  /* [11][0][][] */ 91,1,-13,98,101,39,53,16,104,87,-78,108,-16,-79,28,-76,-54,-100,50,42,32,73,23,-106,-127,-89,-19,70,77,-13,22,-25,-91,-81,54,25,-61,72,-45,-63,-27,101,-76,1,-41,-63,-94,-88,72,102,104,50,-100,-108,21,30,-82,-74,-32,-95,-76,88,75,4,4,83,-56,20,79,53,-94,-68,21,103,-96,47,-62,31,-45,67,-106,-30,-67,-53,43,-79,7,-31,-91,-11,12,-105,-80,-34,-75,-38, 
  /* [12][0][][] */ 2,68,-56,-2,81,9,-32,22,-80,60,-13,22,-46,21,55,-87,-99,-29,-60,-76,35,-7,20,107,-100,-44,111,-99,105,23,-35,122,-87,-76,-41,13,0,-75,-34,47,125,46,-113,-41,-19,-85,-39,127,-43,-111,-87,117,39,-3,-79,98,-39,-63,64,71,69,126,0,59,125,39,-44,126,67,110,45,82,90,126,-14,-6,-28,39,-118,-109,-55,109,58,15,-34,37,60,126,-91,-109,105,43,114,-8,38,85, 
  /* [13][0][][] */ 104,-66,108,97,83,120,88,53,74,-111,14,-25,93,81,73,-54,-119,-70,-83,37,76,-26,125,-46,-94,48,10,24,-86,-86,88,40,45,106,-16,35,-85,-28,11,74,-63,84,-53,13,-43,32,-1,-28,39,113,-49,-104,-103,26,112,-79,-70,28,-16,-78,-22,126,-75,16,-51,-63,-94,93,-35,-11,102,4,-93,42,-78,-44,-102,72,88,-76,59,-101,107,22,-83,-103,99,127,-6,-51,-73,54,124,-48,75,-1, 
  /* [14][0][][] */ -54,-93,83,64,56,-38,-15,-126,-74,-34,66,78,-33,-73,-84,-101,-52,-54,-6,27,-38,31,-6,58,-127,-65,-30,25,-110,-111,-74,40,100,-21,-32,4,86,115,12,-109,-2,-103,35,83,68,-104,65,-79,111,27,76,51,73,-16,-12,16,-67,1,27,77,-10,-78,-27,66,-115,-10,72,-105,-87,-87,-103,94,-14,82,46,-75,52,-107,52,25,46,-27,-107,-35,-109,-85,-120,104,107,11,82,-47,84,98,-14,59, 
  /* [15][0][][] */ 16,-29,-33,70,102,-92,55,-100,55,-7,-77,4,98,-4,-96,-115,84,5,-98,17,41,13,68,103,111,62,34,88,14,49,61,-105,1,4,-70,-7,-73,107,106,-73,10,106,-55,-29,20,-84,-49,-86,-12,-88,-12,24,-105,-104,-56,-14,72,48,-54,106,-52,-73,-4,100,-40,92,-77,-1,-67,-1,57,-81,14,-20,54,-112,-9,51,100,84,-88,54,-115,-67,-127,-42,-98,31,79,64,-119,-43,48,104,-113,107, 
  /* [16][0][][] */ -59,6,108,-61,58,119,-62,61,52,54,-115,67,-18,-59,-60,-57,108,78,89,58,109,80,-43,51,3,50,-77,62,-115,6,40,14,-113,85,52,67,-39,53,-33,-74,19,-52,74,96,63,106,104,-18,-63,-127,5,109,-42,127,64,38,51,96,64,15,113,106,32,65,51,10,-42,96,37,100,-32,-17,32,88,63,94,-20,104,-119,1,10,-88,52,13,8,103,104,5,74,9,-23,121,65,-41,-97,22, 
  /* [17][0][][] */ -12,-77,10,64,-42,-85,-37,-105,31,-58,55,60,78,67,-55,6,28,40,60,110,-46,-9,9,-24,-57,70,-45,33,91,-38,-8,42,-33,-23,37,29,-49,84,-68,-39,-61,-35,-14,-26,30,4,77,-72,69,88,44,25,-25,58,92,-7,-127,47,-51,-96,74,-38,30,57,-29,-47,28,-93,-60,9,55,28,-17,-23,-18,28,71,-55,28,-74,9,10,-23,-75,-75,35,59,-26,31,61,-58,-87,26,68,40,8, 
  /* [18][0][][] */ -101,98,107,-74,2,-111,-111,25,-9,74,-116,-52,-13,30,57,-64,17,-30,70,-26,99,-52,16,-86,37,-105,-23,109,27,46,-5,56,41,-33,-113,-113,-38,30,-20,60,-47,-6,-56,-15,-122,11,20,-9,12,-29,70,28,-113,-12,0,84,-35,32,-11,-126,81,108,10,32,-66,-127,-37,87,67,-82,-77,106,-104,-42,-95,-112,54,51,-7,-80,-63,-12,-34,-71,99,-40,67,65,-117,-83,-68,112,85,-61,48,-23, 
  /* [19][0][][] */ 22,32,80,42,82,-90,100,101,98,-66,29,-15,-103,33,-61,63,75,-112,124,59,-26,83,-61,12,93,-87,29,-73,-99,-127,-70,49,84,-88,32,0,7,-75,-55,-109,45,-124,-90,9,-92,30,79,-101,-30,37,-43,46,-38,16,5,-13,28,102,-2,-31,56,-61,105,65,-74,-4,-30,-4,-12,54,77,-56,-68,-127,-61,-86,-27,-121,13,120,60,-121,-34,81,-93,-10,6,-6,92,30,-8,69,-37,118,72,-53, 
  /* [20][0][][] */ 1,76,72,103,-66,94,18,77,17,16,-88,-1,-9,86,40,-70,-54,-40,-56,-38,20,-47,-78,-74,105,-79,-109,47,19,9,-42,116,103,51,-17,65,42,-35,4,-112,-88,-38,-93,-104,-30,-66,-73,106,63,-127,-100,37,54,122,50,-5,115,76,95,93,110,-58,-72,-35,-25,-69,-53,13,-91,-80,-68,77,-65,-90,31,22,109,80,111,124,85,10,82,-24,59,116,-16,73,17,96,24,70,20,20,-8,2, 
  /* [21][0][][] */ 68,56,54,-89,68,-69,61,2,-5,-65,-61,37,-1,34,-43,-78,-84,-25,13,-9,90,-41,57,-69,34,-66,-26,60,16,6,-8,-35,2,9,-74,-100,90,79,-108,-27,-6,6,23,-16,-84,-71,-68,76,-21,-51,-24,73,27,46,-76,24,-59,42,-39,98,46,-61,13,-15,72,25,-30,-56,-83,-2,48,65,26,-19,57,52,-89,-27,51,77,11,79,31,-65,20,-80,54,-69,-85,64,92,-127,-35,-51,56,-22, 
  /* [22][0][][] */ 21,-63,-79,-103,74,-59,110,43,-101,77,-80,-112,106,-114,-118,-95,38,85,-126,-59,90,-77,29,31,75,-3,-118,100,-60,-79,-71,-121,43,59,23,3,-1,-19,-75,-120,-1,-17,-1,91,52,-124,90,-26,-68,-80,3,-18,-77,-98,-48,35,-27,-35,-40,-35,112,-80,-79,-119,-70,16,-118,-49,115,103,-30,-3,-75,5,66,-99,50,-56,64,83,107,-108,-73,-127,78,82,97,-36,-56,32,-68,49,21,25,-28,99, 
  /* [23][0][][] */ 50,-94,4,52,85,-114,7,-117,53,-84,85,80,17,-100,21,-45,91,-30,-117,107,97,-79,104,-31,-50,-8,85,24,76,55,72,-41,-37,37,25,29,98,-5,-127,6,-102,2,10,-110,-68,-89,113,29,79,-100,-97,-45,79,-67,-47,95,-106,-23,105,43,-104,-85,-49,-11,44,39,-114,-109,68,-13,110,-66,-7,-30,-36,-97,52,-22,95,101,-50,-52,29,-106,95,8,114,-18,-84,45,111,-17,110,-46,-25,87, 
  /* [24][0][][] */ -94,-56,-105,-66,-98,-115,-67,-112,75,122,96,52,115,77,-36,-127,-82,52,21,-58,111,-80,-54,-33,39,-21,89,72,122,46,9,-78,-30,11,63,32,-50,-92,55,-17,-76,-101,120,6,27,-36,43,83,-100,-49,-52,23,76,59,83,-74,-30,81,37,5,102,-1,41,103,-79,110,-43,-89,-120,66,-64,-21,-43,45,111,119,76,-74,-107,-100,-81,-107,-62,-118,8,73,-8,-108,35,-116,10,-113,-15,39,-116,45, 
  /* [25][0][][] */ -90,-68,-90,-20,81,-82,-114,44,36,-122,-50,12,64,-13,-120,-34,-84,50,23,-112,59,74,-22,-69,4,-61,-115,28,66,-99,29,109,83,-120,35,63,88,-68,-32,-29,-94,86,-115,-8,92,31,59,26,-117,83,-77,-6,33,-24,-73,6,-30,42,-116,64,110,34,43,36,-7,65,-28,-16,-98,-14,-36,-125,24,-117,63,12,61,63,5,14,40,39,-55,73,-87,-59,-115,-101,-32,-48,95,17,-127,-19,-24,-87, 
  /* [26][0][][] */ 72,-119,-21,-8,-94,-4,-13,2,-111,-127,115,90,-81,-55,11,-10,120,31,-74,-77,11,77,108,14,88,65,12,49,10,0,-99,0,-34,-60,-110,-104,-71,91,-37,118,-108,109,61,36,-77,79,-43,109,-24,26,7,103,13,-44,-8,-117,125,72,53,29,-1,-104,66,-22,118,-22,-61,61,-97,85,95,101,86,-102,-94,11,44,-115,-105,27,-32,85,85,-78,85,0,-48,14,-92,121,7,24,-64,118,53,92, 
  /* [27][0][][] */ 9,6,-72,-113,-120,-77,-79,-19,40,102,35,-118,-30,55,82,-35,65,-22,65,-92,-104,7,-35,-30,-89,44,-120,-8,64,27,-39,-12,60,69,-101,-94,-99,-73,-117,89,-105,14,25,14,100,22,68,104,91,67,58,-83,-98,-94,-11,-41,106,-30,-124,-88,-65,-70,-40,54,39,-54,-123,106,47,6,-127,4,60,-60,-13,-97,46,-74,88,108,86,-33,118,-63,-83,-92,-40,29,-56,-9,-43,-55,54,14,88,55, 
  /* [28][0][][] */ 90,-10,79,35,-118,-67,-111,-84,-49,-114,51,67,-83,-95,-7,94,86,106,-74,71,-35,13,-122,-88,-127,74,-96,-69,-81,-79,-9,-23,-113,10,73,70,9,-119,-47,22,97,33,-106,44,-120,-17,6,39,14,-66,-82,-38,-94,20,47,31,56,-21,76,44,-9,-53,-100,3,55,65,-33,75,-83,22,-116,-51,62,31,-10,-113,-123,-76,-99,40,-85,-101,109,-36,53,-122,57,-91,-114,-81,-46,-69,-45,50,-101,-74, 
  /* [29][0][][] */ 70,63,65,-44,-73,21,-122,27,110,-8,-91,-101,109,-110,-49,-39,-103,108,48,-74,-81,-32,62,7,-5,6,-45,-26,-110,-15,112,-1,55,8,-82,-50,-7,108,9,102,51,114,-43,91,2,112,-55,-24,20,-14,60,-100,81,-97,116,46,-76,62,-48,120,-127,103,-100,-50,-59,-66,58,95,94,-85,42,-76,121,79,68,34,116,-59,-30,50,-6,-84,-13,-77,68,124,49,80,-41,101,69,88,-112,15,-8,67, 
  /* [30][0][][] */ 37,-41,-68,31,-92,50,-71,17,113,-8,-7,-44,-102,11,55,14,-10,31,94,-108,39,-108,-120,8,-95,18,-75,115,-13,-114,-97,6,-77,-76,-127,-25,11,-22,22,21,86,-81,-13,97,102,-46,100,57,-78,83,15,-78,97,-24,-15,100,-81,-56,-59,-39,-107,-9,-49,-19,-81,-93,-102,93,-54,118,48,-39,-91,103,37,-93,-56,-78,-82,-45,27,50,-107,-16,-113,25,-99,112,-42,-122,75,60,-41,0,17,-67, 
  /* [31][0][][] */ 105,-29,83,116,63,81,-25,-13,3,21,-30,-72,100,-93,-12,127,-27,-52,73,13,46,58,12,108,104,-88,43,56,-66,-79,69,117,36,56,-55,22,112,6,-3,-58,70,-24,3,80,38,-11,-5,42,74,-12,104,-13,-73,-10,-46,4,-24,72,12,124,-43,-1,104,-14,62,103,-4,-33,44,-74,-60,19,-37,-28,43,55,-51,14,64,121,-43,-6,20,90,70,115,-53,21,12,-28,-72,-16,2,75,-28,0, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0019949020352214575, 0.0018298595678061247, 0.0017551229102537036, 0.0022242367267608643, 0.0017354437150061131, 0.0018933938117697835, 0.0017758392496034503, 0.0018955788109451532, 0.0017531916964799166, 0.0021959764417260885, 0.0018032119842246175, 0.0018705372931435704, 0.0017363426741212606, 0.0017466016579419374, 0.0019262140849605203, 0.0018161466578021646, 0.0017318909522145987, 0.0026470590382814407, 0.0017657669959589839, 0.0017107963794842362, 0.0017742461059242487, 0.0022104042582213879, 0.0017998050898313522, 0.0018428235780447721, 0.001680574961937964, 0.0018150409450754523, 0.0016938243061304092, 0.0017157099209725857, 0.0017694872803986073, 0.0017320222686976194, 0.0017892300384119153, 0.0023673339746892452, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2085, 4218, 6556, 1867, -2719, -4057, 18869, 2455, 2760, -1482, 8362, -226, -7590, 2040, 13121, 7103, 13183, 6742, -3191, -5180, 4730, 29303, 14806, 16804, 1531, 896, 4911, 2395, 1991, -4178, 5492, -2144, -254, 3737, 3, 855, 7728, 4321, -1726, 4681, 9313, 6197, 4805, 11167, 4065, 4762, 1969, 8235, 3919, -5186, -5734, 306, -160, -927, 1798, 21, 243, -927, -3095, 8577, -913, 1231, -1022, -1501, -2600, 7898, 22509, 1689, -2108, 616, 1206, 2228, 1208, -975, 532, 8436, -453, 18160, 16871, -871, 11438, 1819, -422, 1338, 15854, 7546, 4149, 1464, 4697, 3581, -278, -6684, 769, -1982, -1639, -1695, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00029942372930236161, 0.00037282265839166939, 0.00036449424806050956, 0.00047240202547982335, 0.00039916206151247025, 0.00036466846358962357, 0.00017608265625312924, 0.00030241280910558999, 0.00021950471273157746, 0.00044044319656677544, 0.00023852671438362449, 0.00029748093220405281, 0.00033502408768981695, 0.0013845192734152079, 0.00023602131113875657, 0.0001642715506022796, 0.00014016854402143508, 0.00021427201863843948, 0.00060677406145259738, 0.00032544395071454346, 0.00013135565677657723, 9.1852009063586593e-05, 0.00020769948605448008, 0.0001001891287160106, 0.00016632277402095497, 0.00051804538816213608, 0.00060693739214912057, 0.00044841194176115096, 0.00026532571064308286, 0.00046648413990624249, 0.00026923985569737852, 0.00035546597791835666, 0.00025944539811462164, 0.00030988836078904569, 0.00034728279570117593, 0.00028423522599041462, 0.00024600283359177411, 0.00024708663113415241, 0.00034444607445038855, 0.00038377521559596062, 0.00013709551421925426, 0.00041755937854759395, 0.00031103790388442576, 0.00020754589058924466, 0.00047090178122743964, 0.00021164816280361265, 0.00026013480965048075, 0.00026249737129546702, 0.0003444869362283498, 0.00025641883257776499, 0.00027461812715046108, 0.00024954773834906518, 0.00072382960934191942, 0.00032942972029559314, 0.0004309162322897464, 0.00037750307819806039, 0.00055358884856104851, 0.00030238874023780227, 0.00049601576756685972, 0.00021613457647617906, 0.0008331089629791677, 0.00053560599917545915, 0.00028570476570166647, 0.00052694854093715549, 0.00071723724249750376, 0.00024356550420634449, 9.6215037046931684e-05, 0.00023136734671425074, 0.00054199673468247056, 0.00053307891357690096, 0.00033437440288253129, 0.00022956023167353123, 0.0011188739445060492, 0.00042128388304263353, 0.00031924940412864089, 0.00025579158682376146, 0.00029946511494927108, 0.00010276850662194192, 0.00010755201219581068, 0.00023803066869731992, 0.00012670237629208714, 0.0001807522785384208, 0.00018589002138469368, 0.0001902220246847719, 0.00011451682803453878, 0.00031636550556868315, 0.00056778587168082595, 0.00019872059056069702, 0.0001391909463563934, 0.00057076558005064726, 0.00029446100234054029, 0.00029616715619340539, 0.00029724914929829538, 0.00052697077626362443, 0.00037355950917117298, 0.0002347911213291809, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -29,93,-1,-127,-41,-33,-37,-74,-24,15,-4,73,20,-65,-20,49, 
  /* [1][0][][] */ -53,27,-91,-1,-61,-28,35,-90,81,76,-62,32,-6,7,51,-127, 
  /* [2][0][][] */ -11,21,-47,25,26,34,-46,-49,127,-18,9,21,-23,66,-56,14, 
  /* [3][0][][] */ 52,-68,11,-87,14,-36,-24,-7,97,-9,57,35,4,40,4,127, 
  /* [4][0][][] */ -80,56,2,42,0,-14,-2,46,3,12,8,-20,-127,-19,-28,21, 
  /* [5][0][][] */ -5,76,108,11,14,87,-90,80,-44,79,-16,-24,38,-47,-127,16, 
  /* [6][0][][] */ 47,-63,127,-109,47,-13,-33,88,-86,-112,40,-45,14,80,-32,60, 
  /* [7][0][][] */ 44,114,-18,-32,92,14,-10,-40,127,94,-36,13,25,-26,41,49, 
  /* [8][0][][] */ 12,-81,8,-79,21,-52,14,-71,25,59,72,-6,9,127,77,63, 
  /* [9][0][][] */ 4,-33,-12,127,39,-5,46,-58,-64,126,39,-18,-7,-69,-1,-9, 
  /* [10][0][][] */ 2,11,-33,-127,18,-12,-1,14,19,-41,9,-32,0,-36,-9,24, 
  /* [11][0][][] */ 8,13,33,-13,90,-39,81,-62,-92,31,-9,24,9,127,-72,-31, 
  /* [12][0][][] */ 79,-11,-127,0,39,-54,18,-17,16,54,-91,-56,-73,105,-21,34, 
  /* [13][0][][] */ -15,5,-22,19,8,-127,-8,21,3,-13,3,-5,15,-17,0,5, 
  /* [14][0][][] */ 36,-30,108,-19,75,-2,-127,-86,-28,-55,18,9,22,-59,-30,-31, 
  /* [15][0][][] */ -108,21,-29,-73,-4,13,127,42,-33,65,98,-13,6,74,60,12, 
  /* [16][0][][] */ 6,73,127,106,3,24,96,86,-88,30,-71,0,35,2,1,-103, 
  /* [17][0][][] */ -46,-113,-20,26,-81,-19,-64,18,-127,-27,21,-43,-9,45,69,-42, 
  /* [18][0][][] */ 2,39,0,67,40,8,23,2,69,50,-32,-35,12,127,57,15, 
  /* [19][0][][] */ 22,-35,42,17,101,10,-92,-53,-107,-89,-50,-127,-30,-35,3,-31, 
  /* [20][0][][] */ 110,-6,-61,-25,3,-96,28,48,-51,41,-127,-24,16,5,5,-21, 
  /* [21][0][][] */ 50,-18,53,-37,-28,10,-17,102,3,-73,78,41,-15,127,60,58, 
  /* [22][0][][] */ -12,37,-27,127,-41,-4,88,54,-16,19,-22,28,7,12,15,-13, 
  /* [23][0][][] */ 70,-1,121,-108,55,-11,-24,40,9,3,-3,-24,9,-30,-127,29, 
  /* [24][0][][] */ -124,25,37,-28,16,115,42,-35,-19,7,127,-7,-104,30,83,-21, 
  /* [25][0][][] */ 19,23,10,16,9,10,68,-53,-2,-127,-11,-16,-6,-29,17,13, 
  /* [26][0][][] */ -35,-11,1,8,-47,-17,-37,-45,-125,-46,-3,-45,17,127,-40,44, 
  /* [27][0][][] */ -9,37,3,75,36,-25,-23,-29,64,12,-23,4,3,127,-12,11, 
  /* [28][0][][] */ 25,66,51,59,127,-17,27,33,-102,-30,-62,-43,30,91,53,-31, 
  /* [29][0][][] */ 6,-7,16,13,24,-4,14,34,-28,-19,-21,-127,-4,-12,-12,7, 
  /* [30][0][][] */ -15,79,-45,81,-35,-21,38,-127,-46,51,-21,-7,59,36,68,86, 
  /* [31][0][][] */ -43,-25,-18,-82,-20,-6,-41,-86,26,86,-3,-127,-23,-43,10,30, 
  /* [32][0][][] */ -127,-72,-14,62,44,41,-15,12,2,-36,-93,48,64,3,64,65, 
  /* [33][0][][] */ -7,-42,-38,-10,-99,-12,-80,-4,60,13,9,-50,30,-122,127,35, 
  /* [34][0][][] */ 43,-6,62,23,41,21,-50,86,-78,-43,72,24,10,-3,-13,127, 
  /* [35][0][][] */ -37,49,-61,20,-7,-24,25,-119,80,79,-84,-6,20,-10,75,-127, 
  /* [36][0][][] */ -41,52,6,97,27,32,127,32,-3,48,-14,-1,-21,23,-49,-58, 
  /* [37][0][][] */ -3,-2,5,-69,-9,4,-32,-44,-67,-4,9,0,-10,-127,65,-41, 
  /* [38][0][][] */ 50,87,-1,-44,127,-2,29,-35,109,72,-28,-7,10,-28,31,20, 
  /* [39][0][][] */ -25,62,-3,-127,-15,11,-38,26,41,-70,-17,-14,12,73,38,31, 
  /* [40][0][][] */ -14,-16,8,-110,-18,2,-7,-36,-114,12,4,-15,-17,-127,103,-71, 
  /* [41][0][][] */ -13,-14,-46,-19,-2,-28,22,-6,-25,18,-39,-3,-127,8,32,23, 
  /* [42][0][][] */ 127,93,-37,-41,-85,-49,-12,-53,10,30,95,-50,-75,52,118,-125, 
  /* [43][0][][] */ -29,127,-93,-26,34,7,82,-23,68,101,-23,15,9,-100,-52,-17, 
  /* [44][0][][] */ -34,-7,0,-54,47,12,-89,-127,-11,2,24,15,-10,-43,75,-72, 
  /* [45][0][][] */ -19,46,-127,-43,13,-58,28,-64,15,37,16,-61,6,-25,64,-24, 
  /* [46][0][][] */ 12,-3,-17,-88,-9,9,20,-34,-124,-27,5,11,-4,-127,65,-32, 
  /* [47][0][][] */ 19,52,22,-21,127,-11,-25,18,-52,44,4,25,1,1,121,-30, 
  /* [48][0][][] */ -127,-73,-23,48,67,20,5,-15,1,-14,-108,45,77,0,63,56, 
  /* [49][0][][] */ 9,4,94,80,127,-5,42,30,-115,-45,-35,-71,9,126,17,-63, 
  /* [50][0][][] */ 34,-30,-77,2,32,-127,-41,-2,-32,-22,-10,-46,25,-9,-21,10, 
  /* [51][0][][] */ -2,48,38,17,15,13,-3,40,-127,63,8,-123,14,-125,-26,79, 
  /* [52][0][][] */ 18,39,15,54,58,-17,34,16,47,60,-36,-64,32,127,46,19, 
  /* [53][0][][] */ -2,-52,-14,-13,-85,-11,-82,-2,44,18,10,-58,35,-127,116,20, 
  /* [54][0][][] */ 46,-4,-51,16,127,87,-122,-32,-67,4,-24,-64,-5,-50,-22,-44, 
  /* [55][0][][] */ 58,-14,11,14,45,-50,-69,-127,-43,-85,-72,4,1,-21,14,-4, 
  /* [56][0][][] */ -16,-7,25,-30,0,-33,-90,64,-12,127,-1,-14,32,13,10,15, 
  /* [57][0][][] */ -7,25,-55,-20,-63,-43,118,86,-20,34,-7,4,20,11,127,-9, 
  /* [58][0][][] */ 52,14,-127,22,90,83,-22,41,-104,-44,-9,-4,-40,25,4,-13, 
  /* [59][0][][] */ -107,72,110,25,-84,-61,127,122,25,10,38,-12,6,11,79,2, 
  /* [60][0][][] */ 1,-3,-59,-9,14,-127,-18,-7,-4,-11,3,-18,31,-21,9,3, 
  /* [61][0][][] */ 26,-12,30,127,83,17,24,3,-104,-6,10,36,-8,22,29,-51, 
  /* [62][0][][] */ -51,127,11,-42,-32,-2,-73,57,-13,-53,-72,-44,-11,-93,-49,-41, 
  /* [63][0][][] */ -44,31,-32,127,-81,17,-78,-35,-58,-25,-25,-36,21,60,37,37, 
  /* [64][0][][] */ 14,-5,7,41,-6,7,-14,59,22,-2,-22,-46,-11,-127,46,-1, 
  /* [65][0][][] */ -10,-45,16,-127,50,-47,61,-43,-19,41,2,-125,-10,6,13,-47, 
  /* [66][0][][] */ 21,-16,57,-36,-6,13,-13,111,15,-63,55,46,-14,127,35,70, 
  /* [67][0][][] */ -2,58,-20,-127,-12,3,-67,37,87,-96,-29,-6,30,80,72,41, 
  /* [68][0][][] */ -23,28,127,15,16,-2,2,-3,-44,-24,-25,-39,19,-11,75,-26, 
  /* [69][0][][] */ 127,67,-9,9,-76,-41,-28,-41,-4,10,75,-63,-44,50,50,-93, 
  /* [70][0][][] */ 45,9,-50,-9,-25,23,58,127,-38,86,-41,2,14,65,-34,20, 
  /* [71][0][][] */ 3,1,-11,2,0,-73,8,23,-29,22,-72,9,-127,-6,46,47, 
  /* [72][0][][] */ 5,23,-127,21,1,20,19,89,-32,-17,13,-1,18,7,0,1, 
  /* [73][0][][] */ -41,20,43,10,52,-38,-77,-127,16,-78,31,-21,13,-40,36,-12, 
  /* [74][0][][] */ -6,42,30,127,15,0,-83,87,-62,22,-42,50,14,-119,36,-96, 
  /* [75][0][][] */ -22,38,-61,-4,-2,8,17,-18,127,32,1,8,-9,111,-27,0, 
  /* [76][0][][] */ -3,-13,-1,23,0,-11,-14,65,19,-27,-17,-127,-8,-4,5,11, 
  /* [77][0][][] */ -35,45,-45,127,-68,55,80,121,36,86,17,51,-10,-46,-1,8, 
  /* [78][0][][] */ -3,12,21,-124,52,-24,-40,58,36,-39,19,-34,47,127,22,69, 
  /* [79][0][][] */ -31,-95,-91,-45,-95,-5,22,-85,127,29,16,46,28,31,36,-63, 
  /* [80][0][][] */ -67,1,124,-127,9,-32,28,-103,-60,76,-41,-118,40,125,120,-62, 
  /* [81][0][][] */ -41,40,-116,26,73,-127,-12,49,-10,-51,54,-8,34,6,9,-5, 
  /* [82][0][][] */ 127,-12,-3,19,17,-112,-21,28,-22,-16,-109,-11,112,9,-3,28, 
  /* [83][0][][] */ -42,77,-123,-75,-37,-14,45,-124,68,58,-43,-127,16,45,43,111, 
  /* [84][0][][] */ -44,42,60,-49,-5,-17,71,-127,-34,59,-1,-53,19,49,76,-4, 
  /* [85][0][][] */ -86,127,20,-114,-79,-23,-27,0,-49,2,-61,28,-2,-13,-91,-28, 
  /* [86][0][][] */ 1,0,-26,18,-23,-38,127,26,-7,-36,-9,1,4,33,73,-14, 
  /* [87][0][][] */ -22,-38,2,-114,10,-34,46,-11,-6,17,-13,-127,-16,3,8,-36, 
  /* [88][0][][] */ 66,-19,24,-13,18,-100,-8,23,-33,42,-127,-42,45,18,72,-2, 
  /* [89][0][][] */ 18,-13,-44,-53,21,-7,-23,-4,-40,12,38,-58,127,-15,32,-46, 
  /* [90][0][][] */ 6,-58,48,-65,78,-12,-63,85,56,-98,-48,-35,-6,117,18,-127, 
  /* [91][0][][] */ -47,-13,-27,-46,7,-30,-27,-82,11,64,-4,-127,-23,-13,7,17, 
  /* [92][0][][] */ -20,19,45,21,4,-127,9,7,-2,-28,-3,-18,4,-22,15,5, 
  /* [93][0][][] */ 34,-17,127,-9,-55,58,24,-26,-16,28,-65,-13,-26,0,38,0, 
  /* [94][0][][] */ 37,-4,-7,-16,34,-15,-18,2,-41,-28,6,-65,127,-9,29,-32, 
  /* [95][0][][] */ 127,100,-12,43,-104,-7,-73,-2,-21,-12,101,-40,-52,23,84,-80, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00072233669925481081, 0.00089940597536042333, 0.00087931437883526087, 0.0011396335903555155, 0.00096294778632000089, 0.0008797346381470561, 0.00042478588875383139, 0.00072954763891175389, 0.00052953825797885656, 0.0010625353315845132, 0.00057542737340554595, 0.00071764987660571933, 0.00080821989104151726, 0.0033400463871657848, 0.00056938326451927423, 0.00039629248203709722, 0.00033814585185609758, 0.00051691476255655289, 0.0014637957792729139, 0.00078510853927582502, 0.00031688541639596224, 0.00022158591309562325, 0.00050105905393138528, 0.00024169858079403639, 0.00040124091901816428, 0.0012497446732595563, 0.0014641898451372981, 0.0010817593429237604, 0.00064007786568254232, 0.0011253571137785912, 0.00064952048705890775, 0.00085753435268998146, 0.00062589207664132118, 0.00074758182745426893, 0.00083779304986819625, 0.00068569561699405313, 0.00059346295893192291, 0.00059607753064483404, 0.00083094969158992171, 0.0009258282370865345, 0.00033073237864300609, 0.0010073299054056406, 0.00075035501504316926, 0.00050068850396201015, 0.0011360143544152379, 0.00051058491226285696, 0.00062755524413660169, 0.00063325470546260476, 0.00083104823715984821, 0.00061859074048697948, 0.00066249514929950237, 0.00060201477026566863, 0.0017461832612752914, 0.0007947238627821207, 0.0010395522695034742, 0.00091069715563207865, 0.0013354906113818288, 0.00072948960587382317, 0.0011965999146923423, 0.00052140804473310709, 0.002009811345487833, 0.0012921083252876997, 0.00068924081278964877, 0.0012712228344753385, 0.0017302797641605139, 0.00058758305385708809, 0.00023211138613987714, 0.00055815593805164099, 0.0013075254391878843, 0.0012860118877142668, 0.00080665253335610032, 0.00055379641707986593, 0.0026991972699761391, 0.0010163149563595653, 0.00077016465365886688, 0.00061707757413387299, 0.00072243658360093832, 0.00024792112526483834, 0.00025946096866391599, 0.00057423068210482597, 0.00030565974884666502, 0.00043605096288956702, 0.00044844538206234574, 0.00045889601460658014, 0.00027626304654404521, 0.0007632074411958456, 0.0013697397662326694, 0.00047939814976416528, 0.00033578745205886662, 0.0013769280631095171, 0.00071036454755812883, 0.00071448046946898103, 0.00071709073381498456, 0.0012712765019387007, 0.00090118357911705971, 0.0005664155469276011, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -12550, 22712, -23039, -9350, -11321, 11874, 29175, -58194, -1986, 18601, 22887, 14806, -13270, 10861, -3327, 10117, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00079307152191177011, 0.00043304840801283717, 0.00019329824135638773, 0.00022984646784607321, 0.00038231775397434831, 0.00035970608587376773, 0.00033174417330883443, 0.00027188402600586414, 0.00026618404081091285, 0.00030272424919530749, 0.00072009244468063116, 0.00064464693423360586, 0.00038716802373528481, 0.00018851875211112201, 0.00045588391367346048, 0.00051316455937922001, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -13,-2,15,-28,13,8,-37,8,7,3,-16,-5,-3,-11,-14,8,-8,2,-3,4,3,-23,7,11,2,4,-11,127,27,-33,47,-11,-2,15,10,-10,-5,19,-30,-4,-20,7,3,22,6,4,12,6,19,-11,-7,14,17,-13,-8,86,10,9,-26,-27,-6,20,0,-38,-42,-63,-14,43,-3,11,4,-12,-3,-38,-5,-31,-18,18,6,6,-6,-28,28,15,-10,-4,-7,-83,3,-17,5,-2,54,-38,-40,-11, 
  /* [1][0][][] */ 28,-75,-92,-59,127,-40,77,27,-5,-89,-61,1,1,-5,-81,33,-63,19,48,44,17,37,-24,-70,22,-5,16,-89,35,-44,-79,41,-16,21,-3,1,12,-15,-12,26,-15,31,-37,-24,-41,95,15,4,20,-62,17,-46,-35,36,56,9,-65,-41,-44,-49,17,-24,-7,-31,-92,115,-39,-31,8,-38,-15,11,58,-107,-25,35,18,-50,38,10,9,-21,9,7,-37,19,-23,23,18,-45,-4,13,22,8,27,92, 
  /* [2][0][][] */ -4,59,-80,-3,96,115,39,106,-16,-125,-15,-40,7,-14,55,38,7,-24,-47,80,25,6,99,43,48,22,-32,-30,30,2,64,-73,28,56,-18,26,-127,-75,42,25,-12,-43,12,-35,10,-37,-1,90,-44,7,-38,-17,102,-12,-1,76,52,18,38,7,29,31,49,-41,9,-14,-11,16,-77,11,-26,-34,-57,-84,3,50,98,69,40,-7,32,-64,28,-10,-63,47,26,39,4,27,-2,-36,15,-38,-73,13, 
  /* [3][0][][] */ 63,22,105,-10,47,-2,19,-11,-12,-59,15,-55,-12,34,34,108,28,-4,34,22,127,-6,45,32,65,-25,-18,36,16,41,-3,86,-101,12,25,-12,-10,-11,-1,43,-68,-30,70,11,21,28,-41,-67,-71,-61,-52,50,5,-122,15,38,-96,72,57,49,6,101,-2,-65,35,68,-5,-39,29,-21,-6,-64,61,-42,62,-5,20,7,54,48,-28,-77,29,-12,-44,30,18,34,22,10,17,41,39,96,49,-37, 
  /* [4][0][][] */ 17,-6,43,-11,127,54,-6,-9,-40,-62,-55,-48,-48,14,-2,58,35,-79,-41,101,-19,21,41,-7,-6,-23,9,-26,1,-10,81,-48,95,26,-31,1,54,34,15,3,-33,-10,-39,-38,-11,-68,2,27,31,-16,-25,10,-3,-42,19,-5,42,-8,-44,49,-13,63,77,6,42,36,-11,4,-64,7,27,82,23,-92,-53,-48,42,49,89,-29,-10,-55,10,-3,-92,21,48,47,-49,32,-2,-50,17,7,34,-8, 
  /* [5][0][][] */ 1,-17,-26,7,31,-34,36,-33,-22,-28,-12,17,-1,28,-11,9,-10,-8,15,-13,34,0,-48,49,15,7,26,-105,7,22,-1,30,-3,-4,18,-44,17,14,-17,12,-6,-5,25,-7,2,1,-2,-35,-13,13,7,-20,-13,-31,-3,-57,-9,5,-31,6,61,9,-3,49,-5,58,-10,64,20,81,21,25,1,24,-5,78,-33,-19,10,-1,-3,-6,-7,20,3,6,-16,127,-12,34,6,-13,-3,15,-55,13, 
  /* [6][0][][] */ 30,-71,22,-39,-32,25,41,28,-7,-6,-23,-80,-29,0,-34,39,5,-12,6,-3,-37,32,24,-1,-20,1,-38,-27,-5,9,36,-9,53,11,66,-13,-10,-16,33,-90,-36,103,-2,-31,8,-38,-29,21,-20,35,-33,65,-25,-66,-8,-5,14,-46,1,4,-4,62,40,-93,26,-35,2,-12,-12,2,127,9,-49,7,-26,18,-80,-15,26,0,34,38,18,0,-31,6,46,15,6,5,43,-43,-12,-31,-35,-19, 
  /* [7][0][][] */ 17,126,61,22,127,69,56,-22,-27,-20,29,-21,-31,38,29,46,-2,-38,-4,40,47,-45,37,-4,-8,20,4,24,20,-17,4,13,35,8,-33,23,27,7,13,84,-55,46,26,33,-3,-27,18,5,-36,-51,21,13,11,-39,-23,52,47,17,-12,9,-11,-30,15,-18,-66,67,-35,-75,-15,-43,1,59,-21,-33,12,5,59,48,49,-22,-34,-47,-16,-3,-30,66,11,-2,-30,32,-58,-48,-41,-22,29,-14, 
  /* [8][0][][] */ -3,0,26,13,-115,-41,45,-37,27,99,73,26,-19,22,-5,-4,-49,14,7,0,-40,-12,-127,53,20,-29,88,-18,10,1,-18,50,82,-23,-10,11,-39,-35,-8,40,28,-40,48,27,-36,-7,34,0,-102,22,18,27,-56,-42,-32,33,-3,-64,-88,-31,15,-25,-29,15,14,87,-21,-71,42,-18,-23,-30,42,61,59,8,-41,-56,-9,16,-83,18,-28,-4,41,3,57,47,19,-30,56,55,-12,-1,36,-1, 
  /* [9][0][][] */ 7,-98,-37,11,87,52,-28,-43,42,-27,75,104,-23,18,59,-107,24,-24,-9,10,-35,-50,21,-24,-18,13,32,21,-19,-3,-12,-10,28,4,-92,51,-19,-7,-27,66,43,-77,-14,75,11,-13,-68,-31,26,44,-11,-81,47,27,-17,-57,-22,70,-24,-11,11,-50,-35,127,-73,-6,-17,-35,28,23,-38,-79,37,5,3,31,43,-90,16,0,-1,-18,-11,27,9,-78,10,-5,-10,-27,-44,37,-77,-1,-1,-54, 
  /* [10][0][][] */ -37,-23,-32,-36,-19,6,64,-21,36,24,24,32,25,-12,-6,0,-8,22,-24,-19,1,22,18,19,-12,-8,15,-127,22,-45,42,-35,-1,10,3,-8,-6,26,9,-5,5,-28,22,-49,5,-2,24,17,-8,41,-27,-21,-27,-27,-7,-54,11,15,4,-42,27,14,2,14,-34,80,-19,-24,16,-26,8,-16,-32,-2,17,46,-6,31,-14,15,-15,-1,-4,29,7,-9,-6,107,-6,-3,14,9,26,-34,41,-40, 
  /* [11][0][][] */ -73,17,-16,0,35,-68,-14,-10,-44,8,-3,28,26,32,-38,-12,44,-2,-66,-51,24,-17,-19,-13,81,12,75,-15,-23,13,-63,20,-9,3,-9,1,-18,-16,18,17,-13,-8,5,14,82,15,60,17,50,57,-3,27,8,-68,24,-18,-78,-26,-37,-52,-2,-4,1,40,-4,-20,16,-5,44,12,15,24,-22,29,32,14,-25,70,-114,58,-36,11,-80,-62,127,17,33,-9,-1,49,-26,-62,-30,55,-26,-15, 
  /* [12][0][][] */ -10,-14,-35,-2,69,21,11,-10,-12,21,22,-8,2,-15,32,-10,-27,-9,10,-14,-4,-6,-37,60,-19,41,-12,119,-30,38,-24,8,-10,39,0,25,-16,-9,13,14,5,-15,-2,-6,-16,1,31,47,-10,-20,1,-25,-22,18,-10,-8,-9,-6,10,34,-17,-14,1,39,32,-80,16,62,-33,-127,-20,55,16,-3,12,79,5,-8,-9,8,0,21,-31,-2,7,-20,7,-53,-2,16,8,-1,-41,42,-11,32, 
  /* [13][0][][] */ -76,65,11,-1,-66,12,-7,29,-54,-30,41,14,100,4,-16,10,-23,24,-36,-1,19,-11,70,-46,61,47,-32,11,7,-29,-27,-113,-109,-24,12,-9,-6,40,48,-25,-48,98,-6,17,45,11,-19,10,60,-24,28,74,59,-77,86,-3,-13,69,56,20,20,40,-9,1,-6,-36,14,20,-3,26,16,-127,5,-34,-95,-3,70,42,-45,-47,77,-30,5,-27,32,-29,106,-4,-25,-17,-32,20,53,-44,-26,7, 
  /* [14][0][][] */ -40,14,-8,-44,27,2,-8,32,-83,-19,23,10,-16,-67,-77,-23,-73,-4,76,10,35,-3,23,-98,-48,26,-49,-17,12,-22,-1,-40,-75,-18,26,8,-8,8,13,-8,1,82,-78,-3,-52,16,3,16,127,-15,20,-9,43,48,-98,25,-19,36,-95,16,14,33,42,24,9,23,-2,5,-59,25,62,44,25,-3,-36,26,53,-75,-22,-105,10,-41,18,43,28,-66,-41,3,-42,14,31,41,14,25,22,-10, 
  /* [15][0][][] */ -31,-71,-8,-38,13,3,-3,-60,-26,23,-5,-32,32,-7,38,-9,-90,-8,-15,12,-14,4,-63,-46,-2,-7,0,18,-16,-16,50,-82,2,25,15,1,-14,17,-94,12,30,-69,2,31,-27,-33,51,29,44,14,-8,-127,-19,43,-4,35,30,-16,-12,35,14,7,39,0,2,-9,-15,-2,-14,27,8,34,-33,6,10,-36,-27,-13,2,10,-12,46,-11,63,-13,-39,-27,-34,-44,60,19,76,-38,12,-8,-15, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.033705540001392365, 0.018404556438326836, 0.0082151750102639198, 0.0097684748470783234, 0.01624850369989872, 0.015287508256733418, 0.014099126681685448, 0.011555070988833904, 0.011312821879982948, 0.012865779921412468, 0.030603928491473198, 0.02739749476313591, 0.016454640775918961, 0.0080120470374822617, 0.019375065341591835, 0.021809494122862816, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 18674, 64045, -1943, -798, 13525, -4337, -779, -1082, 5920, 9764, -3919, -1110, 306, 5408, 5027, -9046, -4171, -442, -672, 12567, -11144, 16412, -3527, 7081, 17920, -4, -5591, 16158, 14014, -19089, 907, 22288, 24876, -11081, 1634, 117, -167, -987, 5147, -8928, -5813, -151, -5748, -736, 29804, -1324, 12684, -950, -13658, 3226, -82, -173, -2391, 17388, -3807, 12239, 18864, 223, 36473, 20, -9381, -517, 1470, -100, -1487, 13326, -1260, -8735, -4758, 3207, 108, -4002, 1219, 187, -3061, -6108, -521, -1892, 40476, -8612, -5869, -10930, 13, 289, 51359, -13079, -10935, -27293, -8689, 9537, -1937, 35071, -90, -2548, -2640, 1129, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00012157554010627791, 8.8052285718731582e-05, 0.00012519773736130446, 0.00024528789799660444, 0.0002692895068321377, 0.00018256569455843419, 6.8366345658432692e-05, 9.8444805189501494e-05, 0.00027562916511669755, 0.00025209586601704359, 0.00023702291946392506, 0.00012724986299872398, 0.00028873517294414341, 0.00021417641255538911, 0.00042872122139669955, 0.00015963120677042753, 0.00019843920017592609, 0.00017049111193045974, 0.00017771916463971138, 8.6402891611214727e-05, 7.8795914305374026e-05, 4.2824034608202055e-05, 0.00014817678311374038, 0.00010060434578917921, 6.6274486016482115e-05, 0.00012100145249860361, 0.00017266986833419651, 0.00019136110495310277, 7.3418479587417096e-05, 0.00046978509635664523, 0.00044517582864500582, 0.00023205633624456823, 0.00012599640467669815, 0.00015041703591123223, 0.00025469256797805429, 0.00044282819726504385, 0.00036471796920523047, 0.00022340087161865085, 0.00031762744765728712, 9.301755198976025e-05, 0.00023231792147271335, 0.00022904113575350493, 0.00038450339343398809, 8.3705308497883379e-05, 0.00037807915941812098, 9.2503942141775042e-05, 0.00011045778228435665, 0.00027504676836542785, 0.00078821316128596663, 0.00011104358418378979, 0.00046040842426009476, 0.00016914217849262059, 0.00022637895017396659, 0.00016259084804914892, 0.00023012422025203705, 0.0001322648604400456, 0.0001487053232267499, 0.00052964099450036883, 4.5152806706028059e-05, 0.00017747977108228952, 0.00030692393193021417, 0.00037916703149676323, 0.00013042330101598054, 0.00017320600454695523, 0.00014453819312620908, 0.00014143492444418371, 0.00027518111164681613, 0.00024846490123309195, 0.00022101445938460529, 0.0001324364566244185, 0.00023941689869388938, 9.7229254606645554e-05, 0.00026048035942949355, 0.00015162120689637959, 0.00026070821331813931, 0.00030709974817000329, 0.00013506380491890013, 9.5541050541214645e-05, 6.3528066675644368e-05, 0.00014233522233553231, 0.00025196533533744514, 0.00023062873515300453, 0.00015698529023211449, 0.00032433733576908708, 7.0489491918124259e-05, 0.00011428232392063364, 6.774014764232561e-05, 0.00051513744983822107, 0.00020604873134288937, 0.00013689073966816068, 0.0003433601523283869, 3.1929743272485211e-05, 0.00016971459263004363, 0.00010795923299156129, 0.00037493786658160388, 0.00030423369025811553, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -45,-71,-12,127,21,69,81,-58,-14,-16,-15,-2,-29,1,37,-3,-9,-45,26,23,18,-127,127,4,-84,7,48,-29,-125,-127,39,24,12,24,61,-19,-32,-10,31,-7,-13,29,-108,71,25,-69,37,45,-18,49,-24,19,2,-6,16,50,-88,-50,-59,-19,-10,1,10,36,66,-25,75,14,-5,14,20,127,23,23,25,-1,-11,16,127,-7,-14,16,-30,19,123,19,-74,-16,-2,-30,-15,-37,1,-26,-16,25, 127,-127,75,106,-43,127,36,-116,70,6,-18,127,127,-97,-13,14,12,127,127,-109,127,-77,81,66,-127,-114,-66,-35,-56,45,-58,-20,-89,53,-127,-86,-45,-15,-55,63,0,127,127,82,-50,-115,-112,-51,-15,-127,43,84,70,-32,45,82,-45,42,-75,-113,-43,-43,-61,64,72,-61,27,30,-73,32,-18,89,116,127,12,21,2,59,-32,54,65,127,127,-23,-11,79,-108,127,-123,-99,3,-127,-89,-127,-38,104, -73,-11,30,-81,14,-27,70,-6,81,-33,-28,24,-19,-5,-8,-12,-8,-16,7,-5,-23,-101,30,-3,-120,97,8,-56,120,48,-14,10,1,12,13,-31,-10,34,19,15,26,14,-118,66,18,-19,35,13,-15,10,-15,3,-10,1,-2,21,-66,8,-36,52,5,43,33,-1,-7,-38,-29,24,9,0,-3,35,10,-26,-5,3,-12,-7,-84,3,-21,-24,-19,2,-108,5,-31,-22,-52,25,-26,-32,29,-27,-14,0, 
  /* [0][1][][] */ -63,-74,75,-35,-49,89,20,127,-54,-20,-1,-114,26,-114,78,29,-2,-62,-17,90,53,-71,47,48,-98,-11,127,-23,-24,63,121,-104,-127,90,-85,-57,-37,32,-30,93,-49,-27,-6,46,-48,127,-23,64,15,94,20,-2,15,-55,28,30,127,120,-72,-87,127,-33,-35,127,69,-37,-16,0,127,39,127,96,-41,102,-9,11,14,12,-32,10,-43,124,-83,108,-1,31,-53,30,79,-127,-32,-6,127,-69,-22,-1, 67,125,58,-113,127,80,94,38,-127,127,127,-33,-65,-127,-127,127,127,-63,-124,-50,102,92,-121,127,-106,-88,-42,127,-127,109,-127,-127,-87,127,107,127,127,-127,-108,127,-65,-97,109,-127,-127,-37,-127,-127,127,-110,84,43,127,127,127,-127,100,-127,-127,127,19,-81,-127,-98,-127,127,-127,127,-115,-127,-108,-86,-127,-79,127,127,-127,127,-77,127,127,30,-45,-127,58,127,95,45,127,11,127,2,-67,38,127,-127, -53,-13,-49,38,-57,-90,41,-25,19,-33,-30,98,2,93,13,8,-4,64,-7,127,3,-85,-41,6,-75,104,-71,-20,-70,-15,17,-60,-72,37,7,-18,-30,46,-70,44,127,-5,-39,30,-40,-60,15,44,8,115,-10,6,-34,-73,4,18,94,3,-4,22,-32,127,91,-51,-43,14,36,-10,-71,120,-19,-88,-1,-54,-16,-21,26,13,79,-36,-70,-43,53,13,-45,-19,73,22,16,62,-44,21,-42,96,-24,-6, 
  /* [0][2][][] */ -66,2,-3,-20,13,-43,65,25,54,-28,-36,-2,19,20,-27,2,-9,62,7,2,-52,-79,2,-9,-22,-53,34,-70,91,38,27,25,15,-9,-11,-46,-7,37,-4,3,-14,-7,-68,105,4,30,12,36,-15,-32,11,-20,20,-1,9,14,-70,23,-15,13,13,-1,-21,-5,-1,-46,-48,15,-24,14,25,29,13,-19,24,4,17,3,-78,-10,-8,-10,17,15,-127,4,13,-44,-59,-50,-28,-48,11,56,-17,-9, 121,34,-127,-35,-72,-17,41,31,-66,-29,-20,-105,-76,113,-13,39,2,-51,-10,-127,88,-49,-37,0,-105,127,-52,21,-36,-21,-7,-8,-63,17,28,5,-24,-27,127,59,12,-15,67,-33,-38,76,-69,-44,-32,-8,-127,-127,-51,-26,1,38,-67,-8,5,39,-9,-19,9,-47,-55,34,61,-23,115,109,-24,-72,11,-57,8,4,100,3,51,24,12,-102,-52,3,2,7,127,39,-61,36,-20,-113,42,81,-9,25, -53,13,-16,26,16,-61,-127,3,-13,-9,-16,5,15,-26,18,1,-9,-16,5,17,-47,-71,15,1,13,-95,20,3,-49,-39,-6,15,41,-21,-7,-26,-36,4,41,-37,22,-2,-49,-33,3,65,21,15,-9,-6,11,-8,18,5,-5,-7,-66,-11,-2,-38,-10,9,86,-11,34,-1,-3,30,4,5,-4,19,-18,15,2,15,35,-1,75,-11,4,-9,-7,-17,74,-2,44,-39,59,39,-17,-54,-6,3,-13,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0051669604144990444, 0.0037422222085297108, 0.0053209038451313972, 0.010424735955893993, 0.011444804258644581, 0.0077590416185557842, 0.0029055695049464703, 0.004183904267847538, 0.011714239604771137, 0.010714074596762657, 0.010073473677039146, 0.0054081189446151257, 0.012271245010197163, 0.0091024972498416901, 0.018220651894807816, 0.0067843259312212467, 0.0084336660802364349, 0.0072458721697330475, 0.00755306426435709, 0.0036721229553222656, 0.0033488264307379723, 0.0018200214253738523, 0.006297512911260128, 0.0042756847105920315, 0.0028166654519736767, 0.0051425616256892681, 0.0073384693823754787, 0.0081328470259904861, 0.0031202854588627815, 0.019965866580605507, 0.018919972702860832, 0.0098623940721154213, 0.0053548472933471203, 0.0063927238807082176, 0.010824434459209442, 0.018820198252797127, 0.015500513836741447, 0.0094945365563035011, 0.013499165885150433, 0.003953245934098959, 0.0098735112696886063, 0.0097342478111386299, 0.016341393813490868, 0.0035574755165725946, 0.016068363562226295, 0.0039314175955951214, 0.0046944557689130306, 0.011689486913383007, 0.033499058336019516, 0.0047193523496389389, 0.019567357376217842, 0.0071885422803461552, 0.0096211051568388939, 0.0069101108238101006, 0.0097802793607115746, 0.0056212563067674637, 0.0063199759460985661, 0.02250974252820015, 0.0019189942395314574, 0.0075428900308907032, 0.01304426696151495, 0.016114598140120506, 0.0055429902859032154, 0.007361255120486021, 0.0061428733170032501, 0.0060109840705990791, 0.011695196852087975, 0.010559758171439171, 0.0093931145966053009, 0.0056285490281879902, 0.010175217874348164, 0.0041322433389723301, 0.011070415377616882, 0.0064439009875059128, 0.011080099269747734, 0.01305173896253109, 0.0057402113452553749, 0.0040604947134852409, 0.0026999427936971188, 0.0060492465272545815, 0.010708526708185673, 0.0098017212003469467, 0.0066718747839331627, 0.013784336857497692, 0.0029958032537251711, 0.0048569985665380955, 0.002878956263884902, 0.021893341094255447, 0.0087570706382393837, 0.0058178561739623547, 0.014592805877327919, 0.0013570140581578016, 0.0072128698229789734, 0.0045882673002779484, 0.015934858471155167, 0.012929931282997131, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1916, 8155, 13921, 28804, 14498, -3658, -1958, 5370, 30716, -4957, 10426, 2969, 9539, 10757, 37921, 1449, 2454, 7320, 10023, 4668, -235, 301, 12526, -1212, 4372, 45, 10890, 6308, 6053, 36090, 35030, 17321, 7136, -425, 12497, 2359, 1377, 3319, 18627, -1018, 9540, 8772, 41070, -2704, 22455, 9169, 5443, 14776, 54406, 8815, -492, 8294, -3449, -217, -1732, 6706, -692, 16864, 5566, 7809, 5788, 14537, 6001, 4742, 8696, 8303, 4960, -3928, 8149, -3499, 3998, 8305, 14222, 4407, -4625, -5123, 5312, 260, 2280, -1093, 18151, 11256, 4834, 12359, 2727, 274, 8124, 81943, 9441, 10419, 5571, -222, 4422, 8865, 5406, 10999, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00019456047448329628, 0.00017987035971600562, 0.00013540686632040888, 8.0874917330220342e-05, 0.00020454885088838637, 0.00028353338711895049, 0.00041028697160072625, 0.0003043707984033972, 7.695330714341253e-05, 0.00027271360158920288, 0.00025704942527227104, 0.00028162976377643645, 0.00013356319686863571, 0.00021579500753432512, 6.3554500229656696e-05, 0.0003810712369158864, 0.00020672801474574953, 0.00017328983813058585, 0.00022207410074770451, 0.00024744815891608596, 0.0002870790776796639, 0.0006348769529722631, 0.00015833409270271659, 0.0005317794275470078, 0.00059554883046075702, 0.00022975908359512687, 0.00020194587705191225, 0.00021515920525416732, 0.00026581814745441079, 9.8102653282694519e-05, 7.9515586548950523e-05, 0.00014209232176654041, 0.00023498476366512477, 0.00044752564281225204, 0.00015965249622240663, 0.00024958228459581733, 0.00038722748286090791, 0.00043932776316069067, 0.00014497738447971642, 0.00052408257033675909, 0.00019566206901799887, 0.00018092684331350029, 6.5948865085374564e-05, 0.00039122233283706009, 0.00014465025742538273, 0.00016732262156438082, 0.00031664315611124039, 0.00018065646872855723, 7.5385207310318947e-05, 0.00023064058041200042, 0.00023940221581142396, 0.0002102139696944505, 0.00031708806636743248, 0.0002103886945405975, 0.00059089995920658112, 0.00016206516011152416, 0.00022022539633326232, 0.00011112090578535572, 0.00036328364512883127, 0.00018641175120137632, 0.00027531938394531608, 9.7037933301180601e-05, 0.00024327015853486955, 0.00020666480122599751, 0.00028587866108864546, 0.00022932363208383322, 0.00025850743986666203, 0.00033429745235480368, 0.0002037702506640926, 0.00020862136443611234, 0.00028350987122394145, 0.00019341896404512227, 0.00014649104559794068, 0.00023610924836248159, 0.00032280912273563445, 0.00026523342239670455, 0.00030623955535702407, 0.00037267728475853801, 0.00033739997888915241, 0.00033985840855166316, 0.00011190211080247536, 0.00014508208550978452, 0.00018069427460432053, 0.00015831583004910499, 0.00040781981078907847, 0.00029653951060026884, 0.00028496023151092231, 4.7489695134572685e-05, 0.00015185237862169743, 0.00021605160145554692, 0.00022806433844380081, 0.00033531393273733556, 0.00032849464332684875, 0.00018083691247738898, 0.00020499585662037134, 0.0001551517634652555, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 0,71,-14,65,19,42,9,-1,46,36,-65,113,4,-120,32,-127, 
  /* [1][0][][] */ 26,34,-10,-17,24,-20,119,-127,10,88,-19,-30,0,-61,21,15, 
  /* [2][0][][] */ -127,82,-20,-39,-18,26,25,111,11,63,123,-7,-93,8,27,-14, 
  /* [3][0][][] */ -56,65,46,59,-69,51,65,87,16,56,-127,-4,30,-71,-94,-73, 
  /* [4][0][][] */ -4,-13,17,58,-13,65,-4,31,16,-8,17,16,12,-10,-127,-26, 
  /* [5][0][][] */ -2,-25,90,-7,2,-51,-19,49,-111,99,-57,-127,-14,41,-50,-60, 
  /* [6][0][][] */ 23,-10,46,-25,42,55,-76,-87,-22,-11,40,-20,127,-12,-23,-28, 
  /* [7][0][][] */ 29,9,127,13,-16,-37,35,-17,-59,47,-74,-74,-5,20,19,-12, 
  /* [8][0][][] */ 24,18,68,64,-49,71,9,29,52,5,-4,-69,-52,8,-127,-63, 
  /* [9][0][][] */ 23,-127,55,61,-16,-19,20,44,116,12,46,-3,-41,35,-124,-52, 
  /* [10][0][][] */ -44,-127,19,-6,-83,-45,12,37,66,119,6,-56,-39,105,73,-36, 
  /* [11][0][][] */ 43,-58,15,-79,41,14,-74,-127,-40,30,-1,-53,18,1,23,-29, 
  /* [12][0][][] */ -28,8,0,-60,-44,-54,-86,-3,-60,-58,-16,31,33,127,98,39, 
  /* [13][0][][] */ -39,-59,-101,40,-20,-50,17,-12,39,32,-33,-5,9,12,127,32, 
  /* [14][0][][] */ 7,-70,57,30,11,33,4,121,23,49,-1,-47,29,47,-74,127, 
  /* [15][0][][] */ 24,-37,14,59,17,-6,89,-5,0,-127,5,-40,-3,-19,-17,-33, 
  /* [16][0][][] */ 36,-71,-46,16,4,-18,38,-79,111,54,96,-3,29,92,74,127, 
  /* [17][0][][] */ -77,-127,44,101,104,9,35,-57,65,-39,21,-92,-39,60,-125,27, 
  /* [18][0][][] */ -4,11,7,8,-98,5,-18,29,-72,-33,-24,-53,-4,-127,61,11, 
  /* [19][0][][] */ 9,-25,22,-54,37,39,-36,99,92,-31,51,46,-14,80,27,127, 
  /* [20][0][][] */ 49,-16,63,-64,-7,2,-53,53,-16,-57,91,-11,23,20,-44,127, 
  /* [21][0][][] */ -69,-4,-3,-30,24,16,-73,-41,-18,65,6,26,-127,-18,28,-11, 
  /* [22][0][][] */ 19,-9,21,-16,21,-69,13,-4,-127,25,-5,-32,-18,-3,81,-29, 
  /* [23][0][][] */ 12,12,18,-4,7,15,-8,11,-1,-1,49,-13,127,1,-6,-41, 
  /* [24][0][][] */ -12,1,8,-87,-26,-19,51,12,-63,-9,-2,-127,11,-97,35,12, 
  /* [25][0][][] */ -127,1,-17,-5,60,-66,-102,-125,-59,40,-78,-96,-78,-86,-13,-59, 
  /* [26][0][][] */ -18,19,20,-119,127,-51,3,1,92,-62,46,-26,13,91,17,97, 
  /* [27][0][][] */ 86,-29,13,-35,-37,-48,-2,-23,-26,22,-127,15,21,-22,-4,27, 
  /* [28][0][][] */ -115,8,-127,-78,60,0,52,-44,16,46,-32,-4,7,1,-58,35, 
  /* [29][0][][] */ -55,-18,-12,127,-13,17,10,-40,-15,10,-68,39,14,-66,21,-36, 
  /* [30][0][][] */ 42,0,127,-29,40,30,15,55,-22,-55,58,-54,-39,9,-64,71, 
  /* [31][0][][] */ 15,-78,-8,-48,-7,-66,21,-42,-4,57,93,33,-12,81,71,127, 
  /* [32][0][][] */ -11,64,-32,33,-127,15,-64,-49,-65,-40,-11,42,10,45,37,61, 
  /* [33][0][][] */ 14,-4,34,127,16,5,9,-40,-96,47,66,-20,8,0,5,95, 
  /* [34][0][][] */ 76,-15,2,14,112,-58,-111,-13,-46,127,-58,1,-52,12,-2,12, 
  /* [35][0][][] */ 77,2,-7,-12,15,-127,-24,-17,-41,-6,-91,-7,74,24,16,28, 
  /* [36][0][][] */ 19,0,-127,1,37,6,-38,18,-37,-25,5,-4,7,9,-13,17, 
  /* [37][0][][] */ 15,-1,127,5,-66,26,14,-59,-9,27,-52,11,18,4,22,13, 
  /* [38][0][][] */ -127,26,-3,5,31,77,36,-20,1,-14,114,-18,-41,19,1,-24, 
  /* [39][0][][] */ -6,-4,25,36,43,-11,-127,42,12,30,-3,-33,3,-9,16,-9, 
  /* [40][0][][] */ 13,127,-54,107,-43,43,85,41,-78,-55,5,65,1,70,-44,-43, 
  /* [41][0][][] */ 12,39,-47,-35,-54,-6,127,122,-61,84,-24,3,13,82,56,-22, 
  /* [42][0][][] */ 50,-56,-7,0,41,12,-67,67,56,-127,79,33,-37,59,-75,6, 
  /* [43][0][][] */ -50,2,16,-32,32,18,-67,-53,-13,46,29,0,-127,-14,39,12, 
  /* [44][0][][] */ 21,-4,1,-1,-7,-26,6,-35,127,-8,17,32,19,90,12,50, 
  /* [45][0][][] */ -72,-76,15,-101,59,-44,-16,61,18,-70,-16,-17,47,120,-30,127, 
  /* [46][0][][] */ -45,19,-28,80,-83,-26,2,-76,-127,37,-44,-6,-2,40,8,-42, 
  /* [47][0][][] */ -33,-17,-109,127,0,58,19,1,14,64,64,62,-24,0,36,-14, 
  /* [48][0][][] */ -21,-6,8,-127,22,-21,-21,-18,-25,31,32,-5,-2,39,101,27, 
  /* [49][0][][] */ 39,-59,44,127,18,2,-93,-70,12,-104,-75,-22,-8,-67,-28,-105, 
  /* [50][0][][] */ 7,89,49,-127,62,18,-30,58,126,-22,-56,12,-18,-46,9,-29, 
  /* [51][0][][] */ 34,-21,35,34,65,-40,-87,-127,23,-85,-37,6,-8,-25,-5,-24, 
  /* [52][0][][] */ 44,37,15,23,38,-29,-90,121,-107,127,-69,-21,110,104,-2,-24, 
  /* [53][0][][] */ -6,105,14,-112,-57,-11,25,-37,-71,-65,-48,58,9,-127,-89,4, 
  /* [54][0][][] */ -9,17,18,34,50,-20,3,-40,2,27,-11,-29,-21,127,-49,-19, 
  /* [55][0][][] */ -119,124,114,-22,52,-9,-28,8,-62,19,97,-31,-2,-7,127,-7, 
  /* [56][0][][] */ 79,-12,49,-89,103,-2,-22,29,88,-4,16,127,-28,21,81,44, 
  /* [57][0][][] */ -25,9,24,70,-19,46,41,127,15,7,35,-19,0,69,15,35, 
  /* [58][0][][] */ 33,127,4,-123,6,45,-13,16,107,5,-17,66,-12,-85,26,73, 
  /* [59][0][][] */ 28,52,25,-119,-73,0,44,-8,21,27,28,-85,-8,-127,-86,30, 
  /* [60][0][][] */ 67,-34,127,-35,-15,125,22,-42,-23,27,-80,-17,47,8,18,-20, 
  /* [61][0][][] */ -22,5,-32,-44,-69,-27,103,127,1,73,-19,3,45,105,17,-14, 
  /* [62][0][][] */ -17,-44,18,-15,-115,30,-56,5,-40,-43,-29,-98,26,-127,80,11, 
  /* [63][0][][] */ 21,-51,-9,-73,44,-10,-122,-127,-52,73,-12,-2,55,-13,11,-27, 
  /* [64][0][][] */ -25,9,36,44,69,-10,-27,-127,-2,-116,-21,-33,-20,-23,11,-2, 
  /* [65][0][][] */ -127,23,29,-60,17,68,32,-39,-71,18,59,-6,-3,25,-9,-17, 
  /* [66][0][][] */ 64,3,102,23,-40,4,-32,22,-59,-14,62,-74,-33,29,-127,-30, 
  /* [67][0][][] */ 25,-50,-44,70,65,-55,-73,-105,35,-127,-76,-66,-92,28,-47,46, 
  /* [68][0][][] */ 6,12,-122,44,-56,-68,6,-55,-30,3,68,-39,-37,12,127,5, 
  /* [69][0][][] */ -29,61,-85,85,-15,-127,27,108,52,25,43,13,122,38,-37,-29, 
  /* [70][0][][] */ 13,8,-18,-36,-31,5,127,88,-25,50,-18,-13,-2,51,16,-4, 
  /* [71][0][][] */ 11,-6,-38,-53,28,10,8,47,-19,-26,-11,2,10,-127,67,11, 
  /* [72][0][][] */ 37,22,-5,47,36,-7,-55,-127,32,55,-57,11,43,50,30,57, 
  /* [73][0][][] */ -25,-127,-22,-45,-89,-26,30,-28,-15,-1,-41,-33,15,-25,33,-8, 
  /* [74][0][][] */ -19,25,74,86,1,2,-127,92,20,-41,-32,-57,-1,9,6,-11, 
  /* [75][0][][] */ -55,1,-64,20,-8,65,105,127,5,54,28,-53,-122,103,40,37, 
  /* [76][0][][] */ 49,-44,-9,-15,37,-69,-127,-110,-54,-30,-27,-53,58,25,31,-33, 
  /* [77][0][][] */ -37,17,-54,-42,-40,-17,-12,-58,127,0,-56,30,5,46,45,-92, 
  /* [78][0][][] */ -59,-105,20,78,85,81,-19,52,-22,-67,-127,101,46,4,79,37, 
  /* [79][0][][] */ 44,3,35,-48,127,13,36,19,82,24,1,28,-5,-27,-9,-34, 
  /* [80][0][][] */ -14,-25,49,-121,-26,-45,-31,-11,-78,-70,-10,-25,49,127,-39,12, 
  /* [81][0][][] */ -3,-9,37,38,-4,68,-17,-17,4,-6,12,-51,-8,32,-127,-2, 
  /* [82][0][][] */ -78,1,16,-127,-44,-5,-24,0,-42,-53,-45,-124,-5,-69,-84,82, 
  /* [83][0][][] */ 2,7,-12,-63,-56,11,2,48,-80,14,9,-108,3,-127,-1,52, 
  /* [84][0][][] */ 127,22,47,64,-38,9,-37,20,16,-26,73,-14,-61,32,51,-72, 
  /* [85][0][][] */ -15,-9,20,-26,28,-6,-57,117,-76,-108,-72,-23,-23,85,76,-127, 
  /* [86][0][][] */ 29,-13,15,-11,-77,74,-41,40,-88,-57,22,-37,-21,-127,-32,42, 
  /* [87][0][][] */ 127,-31,12,-14,-38,-44,12,-1,7,11,-102,25,20,-1,4,49, 
  /* [88][0][][] */ 27,92,-16,14,-31,-1,16,-1,123,28,21,22,-46,-15,127,-112, 
  /* [89][0][][] */ 52,63,-70,-9,-45,-14,26,-57,51,46,17,-39,-43,7,-27,-127, 
  /* [90][0][][] */ -13,-17,-3,-69,-96,37,127,-56,126,-65,28,-58,44,2,-19,-16, 
  /* [91][0][][] */ 13,7,-10,-127,-62,3,21,-66,-60,8,44,38,16,-10,17,124, 
  /* [92][0][][] */ 5,-1,31,5,34,-26,-19,-127,22,-55,-1,-67,-59,5,-12,-22, 
  /* [93][0][][] */ 59,4,29,-126,-24,-30,-17,63,68,-67,97,-4,-12,127,-3,15, 
  /* [94][0][][] */ -89,35,-81,-8,65,-127,-5,6,-20,-44,93,-18,-3,0,-7,-3, 
  /* [95][0][][] */ -12,45,26,-127,-11,10,-33,-7,14,-29,-60,-79,-5,28,-49,13, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00057825347175821662, 0.00053459295304492116, 0.00040244296542368829, 0.00024036846298258752, 0.00060793996090069413, 0.00084269006038084626, 0.0012194145238026977, 0.0009046209161169827, 0.00022871303372085094, 0.00081053248140960932, 0.00076397700468078256, 0.00083703227574005723, 0.00039696338353678584, 0.00064136466244235635, 0.00018889043712988496, 0.0011325824307277799, 0.00061441666912287474, 0.00051503500435501337, 0.00066002679523080587, 0.00073544104816392064, 0.00085322814993560314, 0.0018869187915697694, 0.0004705849860329181, 0.0015805024886503816, 0.00177003163844347, 0.00068286730675026774, 0.00060020363889634609, 0.00063947500893846154, 0.00079003855353221297, 0.00029157105018384755, 0.0002363284002058208, 0.0004223128198646009, 0.00069839856587350368, 0.001330091618001461, 0.00047450340935029089, 0.00074178387876600027, 0.0011508794268593192, 0.0013057267060503364, 0.00043088750680908561, 0.0015576266450807452, 0.00058152753626927733, 0.00053773296531289816, 0.00019600671657826751, 0.0011627525091171265, 0.0004299152351450175, 0.00049729982856661081, 0.00094109558267518878, 0.00053692935034632683, 0.00022405249183066189, 0.00068548723356798291, 0.00071152771124616265, 0.00062477728351950645, 0.00094241794431582093, 0.0006252965540625155, 0.0017562146531417966, 0.00048167409840971231, 0.0006545322248712182, 0.00033026261371560395, 0.0010797159047797322, 0.00055403466103598475, 0.0008182771853171289, 0.00028840659069828689, 0.00072302360786125064, 0.00061422877479344606, 0.00084966036956757307, 0.00068157311761751771, 0.00076831039041280746, 0.00099356600549072027, 0.00060562585713341832, 0.0006200438947416842, 0.00084262015298008919, 0.00057486078003421426, 0.00043538626050576568, 0.00070174067514017224, 0.00095942150801420212, 0.00078830064740031958, 0.00091017503291368484, 0.0011076347436755896, 0.0010027870303019881, 0.0010100937215611339, 0.00033258442999795079, 0.000431198684964329, 0.00053704174933955073, 0.00047053073649294674, 0.0012120818719267845, 0.00088134553516283631, 0.00084693077951669693, 0.00014114419172983617, 0.00045132069499231875, 0.0006421272992156446, 0.00067783036502078176, 0.00099658709950745106, 0.00097631942480802536, 0.00053746567573398352, 0.00060926849255338311, 0.00046112679410725832, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { 7774, -12211, -3701, 31234, 28283, -1646, -3226, -4513, 13636, -4096, 24571, 18090, -11235, 16446, 38623, -28118, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00041875836905092001, 0.00031641442910768092, 0.0002929065958596766, 0.00020360741473268718, 0.0003689232689794153, 0.00033479518606327474, 0.00028461145120672882, 0.00040221665403805673, 0.00023646900081075728, 0.00026047913706861436, 0.00033854920184239745, 0.00073009676998481154, 0.00045945605961605906, 0.00042724009836092591, 0.00054052507039159536, 0.00024764690897427499, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -2,21,-17,17,34,75,-23,-33,44,7,-3,4,5,16,23,74,3,-3,-4,3,108,-54,15,-34,-32,-26,-36,-125,-5,-8,55,57,125,-18,-25,-5,-2,-39,-33,3,-29,-4,23,-31,-7,-30,-18,12,-17,0,-6,-5,-42,-10,2,7,48,25,-27,-29,-59,20,-8,-6,27,7,49,8,27,-10,-14,-15,-82,-2,-7,-11,-4,-93,-5,-16,29,-31,-58,-51,21,-32,-1,14,1,12,10,-21,31,10,-14,127, 
  /* [1][0][][] */ 68,-90,55,86,-3,-70,-27,-31,-15,-78,0,50,-1,-61,-41,-63,-89,0,7,4,-43,-127,-46,53,123,-66,-91,46,-28,97,-19,37,9,26,-4,23,-15,4,60,-30,2,-69,61,-33,-42,18,66,4,39,26,6,-68,57,-67,41,-50,14,39,-13,-105,27,-59,3,-35,-12,-86,43,33,21,65,-13,-25,-72,36,-15,78,29,91,40,-20,52,32,-79,37,-81,79,15,79,-47,-3,39,-24,16,-34,28,14, 
  /* [2][0][][] */ 27,15,5,-34,0,3,-7,26,65,-12,13,70,13,3,45,9,-16,-5,21,1,-13,-67,13,-64,-11,-1,-22,4,-6,8,127,-52,18,-66,-35,65,21,111,-51,-30,6,-43,-1,29,-36,-55,-65,14,29,21,-26,-25,26,-6,-7,-30,-19,-1,-8,33,15,2,68,86,12,-79,10,-73,-8,-18,-21,19,-27,10,-30,5,11,49,0,14,2,88,25,-22,-9,-7,-5,15,32,18,-9,-37,-35,5,-8,54, 
  /* [3][0][][] */ -15,-26,-42,41,35,-22,-4,-30,-20,20,-11,37,30,-28,45,-23,53,-41,29,3,-16,-24,3,-7,-3,19,18,-10,47,-69,73,-24,17,-27,-26,45,-13,-14,-16,10,18,-74,26,-35,-6,-4,8,1,-127,48,-7,29,-106,-60,-32,-23,31,22,-18,57,-8,24,10,39,-10,-89,-48,25,55,8,-22,24,-47,4,-1,-49,-50,-63,29,-46,17,-14,26,73,50,62,40,15,45,-9,-15,4,-36,-7,-28,-36, 
  /* [4][0][][] */ -8,-23,12,-71,-5,-16,-49,-6,-26,-46,-32,-1,21,62,8,-6,64,-12,-2,2,-8,27,48,1,-11,10,13,5,8,-26,-14,-7,-41,7,-6,12,37,-38,-8,0,27,-3,-97,-24,33,-15,-8,-20,13,81,-6,-12,-16,-8,2,4,-8,-19,25,37,3,7,10,12,38,-110,24,-28,-37,12,-20,6,-18,2,-29,25,-21,64,50,-4,15,10,127,-32,43,-24,-15,9,70,14,-2,24,-38,20,0,-41, 
  /* [5][0][][] */ -4,-5,9,4,6,-14,-5,112,54,-14,-12,-34,-29,25,36,28,-21,-15,-4,-36,-49,-9,-13,-31,16,-2,17,80,51,36,54,39,-42,15,25,14,-48,-23,-15,-12,-39,-5,-13,-6,50,15,6,13,12,13,-21,13,-34,-19,2,-24,-33,-22,-2,25,-50,22,-18,-44,-2,13,-14,-3,-6,27,25,-12,35,13,12,4,-10,28,24,105,7,-42,22,37,0,-1,22,-35,-12,-31,25,-127,-30,-15,4,-106, 
  /* [6][0][][] */ -22,-9,-19,-52,-11,-10,-15,10,4,15,-11,5,30,-63,-2,-4,-1,-57,32,11,8,-8,-18,15,68,-4,-7,-11,20,-2,18,-7,-21,3,-26,4,22,9,16,21,-1,-54,-41,-23,-7,-28,20,-127,24,27,19,17,24,-4,-12,-48,33,-11,-8,10,23,21,-3,10,39,64,18,-24,-24,-14,12,-19,7,8,45,-8,-32,27,-3,6,-19,-1,53,-35,-4,52,21,-18,27,5,-42,4,-20,22,-15,13, 
  /* [7][0][][] */ 18,1,39,-14,-1,7,-7,-33,3,-20,-9,-2,-4,-76,25,5,1,-25,-19,-12,16,-13,-35,-3,-22,-13,-9,-11,8,9,2,2,-11,10,-4,-12,8,-7,-36,12,10,-15,-17,29,-8,4,-14,71,-3,20,-4,-17,-24,6,-4,-49,30,-5,4,1,-1,0,-11,2,-15,42,16,-35,-9,2,15,29,-14,-15,-8,6,44,10,-14,-14,13,-25,37,3,-25,127,-1,-6,-33,-12,6,13,-19,1,-9,3, 
  /* [8][0][][] */ -57,27,-38,16,49,-17,-13,39,10,65,-48,-7,-13,40,64,-21,-11,15,-77,17,13,32,-43,13,-39,-27,17,17,38,-52,-4,-2,26,-8,35,3,-17,43,-29,51,-2,30,2,-127,-48,2,32,-21,-35,29,-16,66,-109,74,15,-19,6,-26,-24,-26,-8,-42,3,8,-36,30,40,-16,-6,4,66,68,-7,45,35,23,-9,-76,20,-41,-15,-25,25,19,-58,3,26,-60,-11,24,-19,-6,38,-18,-8,-4, 
  /* [9][0][][] */ 26,-71,-13,-31,32,17,-25,34,24,-14,-2,-6,-58,-20,14,19,-9,-4,34,-27,-31,16,-44,-27,42,-5,23,4,-48,-21,-29,-3,-5,13,48,40,6,47,-29,48,2,32,-22,-94,11,-5,21,-127,-38,14,-14,21,-26,11,-8,-11,-49,28,-10,9,5,5,17,19,18,120,50,52,8,-3,30,-29,-2,0,-30,21,54,1,25,17,-7,-1,14,-29,6,33,2,-12,-62,18,-32,-16,10,3,13,-14, 
  /* [10][0][][] */ 32,48,-13,22,66,-97,-21,-34,5,51,44,8,-16,11,8,-76,28,43,-26,35,-82,-24,-13,-13,-60,-33,-64,62,14,23,12,41,-17,2,47,-11,89,1,-14,-22,-11,74,31,-20,-52,-21,-32,12,-8,-21,-28,0,-6,-20,-8,-26,-3,10,-18,-12,9,3,-18,17,-2,38,53,16,4,14,34,49,-39,-22,-52,-9,-7,28,-8,8,34,5,-85,-36,59,-33,104,5,-17,3,25,-25,79,44,-19,-127, 
  /* [11][0][][] */ 46,34,-21,27,-4,11,48,15,-1,-22,-17,-24,-17,7,36,8,-2,-18,-100,-9,2,21,-10,-7,-42,-34,-12,14,-8,29,-7,-6,-4,7,18,21,11,28,-2,16,-5,34,52,-97,24,-25,0,2,-127,13,2,-45,21,17,-12,6,-14,-13,13,-1,11,-9,-14,-3,-51,53,-9,10,10,5,47,9,-39,-21,14,32,1,-26,-47,8,16,-9,85,48,5,-9,-5,-29,-8,17,-17,-14,-2,11,-17,16, 
  /* [12][0][][] */ -27,2,18,-1,-19,22,18,-5,127,-4,-7,-11,-4,13,-33,-29,10,28,11,74,55,41,-12,-29,1,10,21,-23,-103,-13,25,-28,2,-26,-18,-13,10,-3,29,-10,-45,-21,1,8,3,39,5,-6,11,17,-55,7,-5,-3,22,10,76,-20,11,25,2,-10,13,-4,-4,35,-31,16,5,3,-13,-21,11,9,-63,4,35,-6,-8,-52,-22,5,34,40,-8,-15,-35,-39,2,12,0,69,-26,-22,13,20, 
  /* [13][0][][] */ 28,-10,-32,23,24,4,7,-5,-5,10,9,7,21,-14,8,-9,21,-62,-30,12,-6,-23,13,-2,3,13,-3,-13,-11,-30,0,17,3,10,1,38,17,-6,-1,9,5,1,20,35,15,12,-12,-127,21,-7,11,11,-10,-1,13,4,-14,14,20,14,10,13,-4,6,-6,-21,-22,-54,4,9,-21,-27,-20,35,-11,15,-26,2,14,-3,23,-8,-8,10,13,21,3,23,3,9,18,-3,8,18,-14,-11, 
  /* [14][0][][] */ -99,-45,20,28,31,-18,-39,1,-14,8,2,21,46,1,-127,-2,67,-20,-16,36,-6,-7,19,34,-117,-1,39,-2,-47,-63,-23,11,-7,5,26,-48,35,47,-10,13,22,46,-11,-31,15,107,64,43,-98,53,17,39,-49,-15,22,-8,-1,-19,59,57,41,54,-3,31,0,-27,-45,41,-6,92,-51,-76,-72,1,-23,39,-10,47,80,0,51,8,12,17,46,12,31,38,31,41,67,-13,-12,20,22,-32, 
  /* [15][0][][] */ 95,-10,37,7,-16,90,31,-18,-15,45,3,-19,-125,-11,-19,49,2,45,55,-25,16,43,-119,49,21,-2,36,13,28,50,-68,-81,8,-53,51,-12,39,-22,-89,-106,-15,20,0,48,1,61,-31,-39,117,-41,-65,24,74,-127,63,-117,-3,-69,29,16,-125,9,11,27,98,-31,-59,57,-19,75,5,29,40,32,21,-10,16,-41,67,-6,-13,-9,52,86,-37,-8,-2,-76,-13,-4,56,14,-60,86,28,-9, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.017797229811549187, 0.013447612524032593, 0.012448530644178391, 0.0086533147841691971, 0.015679238364100456, 0.014228795655071735, 0.012095985934138298, 0.017094207927584648, 0.010049932636320591, 0.011070363223552704, 0.014388340525329113, 0.031029112637042999, 0.019526882097125053, 0.018157703801989555, 0.022972315549850464, 0.010524993762373924, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10192, -9260, 3621, 57569, -2254, -4708, -8793, 5896, -2917, 997, 3219, -2220, 2248, -3560, 6344, -6532, -376, 17654, 24357, 2384, 2784, -2185, 267, 267, 14888, -539, -1050, -3705, -5381, -7933, 4937, -9041, -864, -2124, -1970, 15689, 1287, -4105, 20258, 111, -368, 1690, -9175, -7105, -7353, 68117, 269, 14927, 28299, -13230, -439, 8117, 6288, -95, -5416, 2309, -12994, 1676, 1611, -7219, -2108, -1199, -13308, -1049, 1690, 16202, 31074, 22854, -12072, 716, -11517, -1930, 51028, 10925, 377, 452, 19532, 33482, -476, -8630, -1753, -6723, 775, -3578, 478, 1209, 1185, 466, 1257, -4009, -206, 662, 680, -1435, 100, 51382, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00019007318769581616, 0.00012339302338659763, 0.00023488799342885613, 3.7228583096293733e-05, 0.00016718711412977427, 0.0001623878488317132, 0.00034571316791698337, 8.5150102677289397e-05, 0.00014946001465432346, 0.0004324780311435461, 0.00016778327699285001, 0.00031707558082416654, 0.00010119079524884, 0.00044716830598190427, 0.0001638245303183794, 0.00013107784616295248, 0.00010997847130056471, 0.00031798999407328665, 6.5798463765531778e-05, 0.00026085268473252654, 5.1709714171011001e-05, 0.00020258376025594771, 0.00013493269216269255, 0.00035772775299847126, 0.00024443829897791147, 0.00025389649090357125, 0.00013675499940291047, 0.00020914289052598178, 0.00011904237908311188, 0.00010460783960297704, 0.00014553293294738978, 0.00016415654681622982, 0.0001268369669560343, 0.00011209461081307381, 0.00019012617121916264, 0.00015410577179864049, 0.00041151753976009786, 0.00011641566379694268, 5.2594579756259918e-05, 0.00013653974747285247, 0.00022675264335703105, 0.00031751370988786221, 0.00039619707968086004, 0.0001527457352494821, 0.00019429139501880854, 4.8897647502599284e-05, 0.00020804475934710354, 0.00024105218471959233, 8.9713634224608541e-05, 0.00017557271348778158, 0.00019404733029659837, 0.00016756972763687372, 0.0002659119782038033, 0.00028557213954627514, 0.00025641874526627362, 0.00039630205719731748, 0.00029489709413610399, 0.00022615234775003046, 0.00011401554365875199, 7.9341756645590067e-05, 0.00031164937536232173, 0.00015228157280944288, 0.00028070475673303008, 0.00014272473345045, 0.00020585428865160793, 0.00018076150445267558, 7.6038850238546729e-05, 7.6707059633918107e-05, 0.00030850362963974476, 0.00021955894771963358, 0.00019607439753599465, 0.00010523013770580292, 0.0001131087337853387, 0.00012424281158018857, 0.00017781372298486531, 0.00023381086066365242, 0.00054141785949468613, 5.3348496294347569e-05, 0.00030672899447381496, 0.00022719202388543636, 0.00015542963228654116, 0.00032544764690101147, 0.00013822494656778872, 0.0001508187415311113, 0.00013535730249714106, 8.9980989287141711e-05, 0.00012740668898914009, 0.00019301702559459955, 0.00020764514920301735, 9.571435657562688e-05, 0.00019655423238873482, 0.00011339569027768448, 0.00014891425962559879, 0.00047536063357256353, 0.01219751313328743, 8.032093319343403e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,5,-21,107,-16,22,-64,-53,18,-6,98,-11,2,-8,-5,62,6,15,-29,2,76,1,31,-33,2,17,42,48,20,14,25,48,-5,29,9,-15,6,49,-59,-26,20,10,28,19,-84,-56,25,-5,-10,-22,-8,-7,50,5,-8,1,-3,-36,29,-31,28,-1,127,27,-13,-11,9,-50,64,36,5,-6,78,-34,69,5,16,-127,29,67,3,15,127,-13,38,30,-30,-19,36,-5,-14,80,5,21,-2,10, -49,13,-8,12,52,-10,-12,-127,39,12,-127,-4,-20,-12,3,104,19,-31,-10,-16,78,-91,127,26,-61,-31,-105,-16,25,35,-49,16,124,14,-11,-1,-24,127,-66,-127,10,-18,-30,14,47,-127,127,-45,-76,52,52,6,38,-64,31,55,35,41,-99,85,127,36,3,-20,43,-38,-100,1,38,-30,-18,48,-47,-49,106,-4,-30,-58,-33,66,-66,66,-17,10,-10,48,54,-42,-28,52,-12,73,-127,-31,24,-127, -1,-4,-23,-75,9,18,37,18,-5,-3,4,66,-3,-12,-12,10,-11,16,-12,15,5,27,24,-34,1,-30,10,12,-7,3,47,-80,41,19,13,-23,13,4,-27,-20,9,2,-16,10,23,-28,22,0,7,-9,6,-5,4,5,-5,8,-9,46,9,-1,15,-18,0,-17,-26,-17,26,-48,-106,-9,44,-17,-127,-22,-10,16,9,-9,6,13,-13,23,-35,1,-40,20,25,34,-25,-18,25,-12,17,7,-1,-47, 
  /* [0][1][][] */ -40,56,-17,39,-85,-17,-11,-44,24,97,-45,-21,-31,-24,-7,63,127,-25,-92,-13,58,-127,-27,15,-34,-47,-127,-5,35,36,-50,27,-122,-76,-53,3,65,-2,-51,46,-19,87,2,-1,34,-53,-12,-32,127,48,-3,20,44,9,-38,-17,31,9,-121,127,-38,-89,21,127,-60,-35,-89,126,-37,127,-14,54,-35,-56,37,9,-35,-68,127,49,127,34,6,-1,127,28,-96,48,-38,-35,-101,38,96,104,29,-58, 127,127,127,127,-45,-127,127,19,127,-127,16,-127,-107,127,127,127,-17,-127,-63,-127,127,23,-68,127,127,127,-55,-127,127,127,-127,127,-9,-127,-119,127,-127,-44,97,110,-127,-127,127,127,127,-118,-108,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-41,41,-109,-29,-68,-67,127,127,-70,127,127,-107,-127,127,-43,127,-127,-127,-127,124,-77,127,-43,127,83,127,-38,-127,-25,-110,-127,-124,-21,-127,-22,-127,-127,115, -25,64,-38,3,127,71,-23,44,2,23,-15,-3,-25,-31,-15,-5,-106,-22,-127,37,33,75,-13,-116,-34,-41,123,72,10,34,72,9,121,-49,127,-4,54,6,-86,15,35,24,-22,2,-23,-51,-12,-43,81,16,-13,40,-5,-4,-75,-14,24,21,127,-87,4,127,0,-36,-112,-28,-77,99,15,-18,120,24,-20,-58,13,46,-28,-7,-43,-2,-46,6,46,27,-89,34,127,-48,32,-21,127,-11,-116,37,34,17, 
  /* [0][2][][] */ -4,-40,-21,-59,-4,11,39,30,0,9,-20,53,22,-34,-7,6,39,3,12,21,-10,26,-17,-25,2,-24,9,6,-10,-7,50,-76,-39,67,-27,-26,30,-33,-63,17,10,9,-35,17,14,-84,-13,-1,-9,6,16,-8,8,1,-22,6,-1,43,-49,36,-3,-11,7,17,-6,-10,20,-52,-57,11,-18,-10,-116,-33,0,17,13,-11,57,20,21,22,-44,14,12,25,-19,11,4,24,21,-8,17,41,-6,-30, -27,-10,-27,24,-44,78,-26,62,7,-6,52,-12,127,-8,-18,-16,-3,-39,-62,23,-19,75,-47,-112,-47,-46,101,71,13,42,55,-2,-127,63,-15,-22,-28,-25,-127,-3,44,-14,-16,34,-26,-46,-20,-48,-59,30,68,24,-10,-81,30,51,18,27,73,-53,23,-59,-8,1,18,-27,-127,-53,-11,-27,-62,24,37,-49,-31,-8,-45,23,-56,4,48,36,16,13,6,62,-92,127,16,127,-30,-19,112,-20,47,80, -9,-34,-26,28,13,64,-45,11,1,-6,-1,15,11,-51,-10,-12,-45,-5,16,19,-25,5,-22,4,-5,19,-3,49,-2,-6,35,29,18,42,19,-23,-7,-25,-29,9,10,-13,21,7,-73,-33,-15,4,-1,-14,-3,-4,-8,9,-16,-5,-3,-48,12,-27,-20,51,8,-28,-11,-2,35,-53,44,5,60,-19,30,-58,-19,20,10,12,-4,26,-30,32,94,-11,-16,54,41,-9,110,12,2,-19,10,-21,-6,-49, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0080781104043126106, 0.0052442033775150776, 0.0099827395752072334, 0.0015822147252038121, 0.0071054520085453987, 0.0069014835171401501, 0.01469280943274498, 0.0036188792437314987, 0.0063520502299070358, 0.018380315974354744, 0.0071307891048491001, 0.013475711457431316, 0.0043006087653338909, 0.01900465227663517, 0.0069625424221158028, 0.0055708084255456924, 0.0046740849502384663, 0.013514574617147446, 0.0027964347973465919, 0.011086239479482174, 0.0021976628340780735, 0.0086098099127411842, 0.0057346392422914505, 0.015203429386019707, 0.010388627648353577, 0.010790600441396236, 0.0058120875619351864, 0.0088885724544525146, 0.005059300921857357, 0.0044458331540226936, 0.0061851493082940578, 0.0069766528904438019, 0.0053905709646642208, 0.0047640209086239338, 0.0080803623422980309, 0.0065494952723383904, 0.017489494755864143, 0.0049476656131446362, 0.0022352696396410465, 0.0058029391802847385, 0.0096369870007038116, 0.013494332320988178, 0.016838375478982925, 0.0064916936680674553, 0.0082573844119906425, 0.0020781499333679676, 0.0088419020175933838, 0.010244717821478844, 0.0038128294982016087, 0.0074618402868509293, 0.0082470113411545753, 0.0071217133663594723, 0.011301258578896523, 0.012136815115809441, 0.010897796601057053, 0.016842836514115334, 0.012533126398921013, 0.0096114743500947952, 0.0048456606455147266, 0.0033720247447490692, 0.013245098292827606, 0.0064719668589532375, 0.011929952539503574, 0.0060658007860183716, 0.0087488070130348206, 0.0076823639683425426, 0.0032316511496901512, 0.003260049968957901, 0.01311140414327383, 0.0093312552198767662, 0.008333161473274231, 0.004472280852496624, 0.0048071211203932762, 0.0052803196012973785, 0.0075570833869278431, 0.0099369613453745842, 0.023010257631540298, 0.0022673110943287611, 0.013035981915891171, 0.0096556609496474266, 0.0066057592630386353, 0.013831524178385735, 0.0058745602145791054, 0.0064097964204847813, 0.0057526850141584873, 0.0038241918664425611, 0.0054147839546203613, 0.0082032233476638794, 0.0088249184191226959, 0.0040678600780665874, 0.0083535546436905861, 0.0048193167895078659, 0.0063288561068475246, 0.020202826708555222, 0.51839429140090942, 0.0034136394970118999, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 15867, 1858, 6239, -580, 4371, 4823, 15791, 5478, -1402, 16513, 5472, 1030, 6560, 39629, -379, -1754, 10680, 11154, 2890, -180, -499, 13247, 4368, 3012, 7930, 5584, 3297, 4434, 48, -99, 6433, 7099, 12079, 1825, 7974, -411, 17248, 7152, 995, 5514, 868, 11104, 14457, 3380, 3364, 11295, 15432, 4972, 4832, 2867, 165, -948, 15325, 6522, 8317, 14303, -259, 8338, 2827, 3260, 14309, 6488, 2551, 4881, 6992, 4199, 5224, -748, 17152, 7566, 6636, -1284, -1216, 2973, 1796, 2718, 19917, 15811, 12168, -2770, 4913, -4454, -1942, 555, 7085, 4519, 5423, 4360, 10680, 3729, 7874, 3748, 12341, 17778, -9224, 12180, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00016430979303549975, 0.00019425027130637318, 0.00021713532623834908, 0.00092798407422378659, 0.00036214047577232122, 0.00019459791656117886, 0.00020042044343426824, 0.00064585788641124964, 0.00034733267966657877, 0.00011004347470588982, 0.00026532477932050824, 0.0007818473968654871, 0.00041761837201192975, 0.0001220872945850715, 0.00027982547180727124, 0.0003796479431912303, 0.00020924376440234482, 0.00021073933748994023, 0.00016318458074238151, 0.0006476401467807591, 0.00054645747877657413, 0.00018804344290401787, 0.00035470188595354557, 0.00026111194165423512, 0.00021829652541782707, 0.00037221409729681909, 0.00043354401714168489, 0.00021178383030928671, 0.00077635556226596236, 0.00036043199361301959, 0.00022490587434731424, 0.0002695946313906461, 0.00016186160792130977, 0.00059875712031498551, 0.00020060077076777816, 0.00066068867454305291, 0.00013053034490440041, 0.00036439549876376987, 0.0004771023232024163, 0.00017477243090979755, 0.00059598218649625778, 0.000164216966368258, 0.00014973928045947105, 0.00020174938254058361, 0.00033827940933406353, 0.00028801616281270981, 0.00018612011626828462, 0.00030063226586207747, 0.00032425930839963257, 0.00031433108961209655, 0.00054070533951744437, 0.00069802271900698543, 0.00017319736070930958, 0.00024632003623992205, 0.0002775697794277221, 0.00012789673928637058, 0.00041574315400794148, 0.00020761371706612408, 0.00026565528241917491, 0.00049897300777956843, 0.00011931964399991557, 0.00021689236746169627, 0.00041337808943353593, 0.00056598457740619779, 0.00015497492859140038, 0.00026200609863735735, 0.00037485195207409561, 0.000407400046242401, 0.00015854768571443856, 0.00015197444008663297, 0.00028900039615109563, 0.00034180699731223285, 0.00033880452974699438, 0.00043587543768808246, 0.00024180111358873546, 0.0004717560950666666, 0.00012118704034946859, 0.00028308099717833102, 0.00013569988368544728, 0.00042822730029001832, 0.00021961623860988766, 0.00046669729636050761, 0.00020165521709714085, 0.00051076262025162578, 0.00022280111443251371, 0.00034228214644826949, 0.00029746018117293715, 0.00031907530501484871, 0.00015266840637195855, 0.00041931532905437052, 0.00017812503210734576, 0.00045283950748853385, 0.00017244741320610046, 0.00015355677169281989, 0.00031852378742769361, 0.00027233143919147551, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 37,-24,127,90,74,-10,8,-43,112,-22,-61,-51,37,72,-33,-89, 
  /* [1][0][][] */ 55,87,11,1,85,-11,18,60,74,91,-45,127,7,-6,113,-117, 
  /* [2][0][][] */ 34,-75,-18,-2,-51,6,-54,73,-91,-95,-6,85,6,-127,95,-119, 
  /* [3][0][][] */ 119,109,-2,24,-127,-17,-44,-25,-4,-12,99,-81,-52,91,-30,-16, 
  /* [4][0][][] */ -6,-8,9,-1,-33,28,-6,54,-88,-40,10,-15,-16,-127,31,7, 
  /* [5][0][][] */ 127,-63,-8,6,-21,-97,-34,20,0,6,-111,24,38,18,-12,17, 
  /* [6][0][][] */ -127,-63,-4,74,-60,17,-21,43,-83,-72,-34,-44,3,61,3,83, 
  /* [7][0][][] */ -23,32,-113,59,62,-127,-31,51,18,-34,22,-1,-6,14,-50,16, 
  /* [8][0][][] */ 35,-58,-8,-7,18,24,-56,-81,-9,5,-72,9,-127,4,-1,21, 
  /* [9][0][][] */ 25,-35,59,112,-3,29,-16,-86,127,-102,20,-28,-13,68,-84,25, 
  /* [10][0][][] */ -127,-100,34,-23,87,35,47,60,83,-55,-80,1,98,-90,-86,72, 
  /* [11][0][][] */ 14,-4,-127,16,35,23,-23,31,-2,-31,-8,-14,3,24,-42,-1, 
  /* [12][0][][] */ 117,-127,-14,22,-13,-30,-87,-43,74,-35,-94,-29,-60,-39,-16,4, 
  /* [13][0][][] */ 69,-69,-1,-91,119,6,-95,-127,17,-99,-2,8,-40,3,66,29, 
  /* [14][0][][] */ -50,20,-71,-56,86,-127,40,-74,44,35,-13,-113,10,117,2,22, 
  /* [15][0][][] */ 33,-13,68,45,54,-48,-36,2,28,-52,-61,-14,-127,-30,-20,49, 
  /* [16][0][][] */ -102,53,25,54,37,94,56,108,25,61,127,45,19,1,-29,-73, 
  /* [17][0][][] */ -6,-18,-58,-47,-44,0,40,63,-36,127,-29,-6,-7,97,79,8, 
  /* [18][0][][] */ 24,127,-35,8,35,8,80,-71,24,117,-71,116,-17,-63,9,-116, 
  /* [19][0][][] */ 0,-12,37,16,1,61,2,17,18,9,-37,-12,-127,-7,-12,17, 
  /* [20][0][][] */ 84,-31,5,-53,-23,29,9,-58,-39,30,-127,-26,32,2,47,-10, 
  /* [21][0][][] */ 49,6,127,41,-20,48,32,1,-5,31,-15,-17,-9,84,15,7, 
  /* [22][0][][] */ 37,14,25,16,8,-20,21,127,2,-13,8,37,37,21,22,2, 
  /* [23][0][][] */ 3,1,-45,22,38,-127,-11,23,9,-26,-65,-10,-86,-11,18,14, 
  /* [24][0][][] */ 19,-52,-6,-71,40,-27,-32,-21,12,14,86,91,-36,85,127,53, 
  /* [25][0][][] */ -127,-92,-87,-5,17,-30,19,-31,-66,10,-80,9,8,45,11,79, 
  /* [26][0][][] */ 2,18,61,-6,-20,36,-37,80,-63,-68,5,25,29,-127,35,-3, 
  /* [27][0][][] */ -107,57,-41,51,59,-22,12,25,30,-17,127,29,-47,-9,-28,-40, 
  /* [28][0][][] */ -23,2,18,18,7,3,6,68,22,5,-20,-9,-127,-9,-7,38, 
  /* [29][0][][] */ -17,63,42,-41,44,-13,22,-29,-127,34,-30,4,-12,22,-98,5, 
  /* [30][0][][] */ -10,-20,-127,-40,12,-54,-9,20,-25,-26,-2,-30,-44,-23,16,11, 
  /* [31][0][][] */ 127,-27,-106,23,34,-2,-30,64,-23,1,-74,-49,16,-3,-57,12, 
  /* [32][0][][] */ -116,77,15,11,10,81,29,22,13,-3,127,5,-8,13,9,-7, 
  /* [33][0][][] */ 15,-17,127,-22,-54,13,16,-23,-5,17,-17,6,-2,32,52,36, 
  /* [34][0][][] */ -48,-28,-65,-127,33,61,-13,-33,-15,-38,4,-76,-54,17,33,81, 
  /* [35][0][][] */ 0,-34,33,63,54,-32,13,-20,-127,39,-11,14,-30,127,-37,-20, 
  /* [36][0][][] */ -98,57,-40,-5,-30,35,52,91,-10,36,127,-16,-8,35,-2,-19, 
  /* [37][0][][] */ -50,20,127,-36,-79,-80,45,-33,11,29,11,-1,10,-71,80,28, 
  /* [38][0][][] */ 15,-16,5,37,53,-54,-62,4,-8,-19,61,3,127,34,-11,-16, 
  /* [39][0][][] */ -29,7,-19,-61,-41,-125,71,127,-63,-18,-2,-57,-1,29,90,82, 
  /* [40][0][][] */ 46,-9,-10,-18,-19,100,-23,0,5,-2,37,-20,127,18,-38,-29, 
  /* [41][0][][] */ -19,7,-31,-127,7,-7,-27,-38,-11,-31,39,-34,-12,-6,-20,62, 
  /* [42][0][][] */ 40,17,15,110,-83,7,-87,24,-44,-64,52,-59,-21,127,-50,-3, 
  /* [43][0][][] */ -1,127,-34,113,13,28,35,-61,-22,77,7,25,19,-29,49,45, 
  /* [44][0][][] */ 10,-46,-127,10,77,80,-35,75,-28,-21,32,-17,27,-39,-64,-5, 
  /* [45][0][][] */ 14,22,-4,-127,-36,-3,57,14,-30,22,-45,2,-7,-90,40,-42, 
  /* [46][0][][] */ 2,22,66,-38,11,24,-57,41,4,-62,-15,7,-6,127,62,3, 
  /* [47][0][][] */ 16,-40,20,-49,-44,7,-72,56,-21,-44,19,33,14,-127,48,18, 
  /* [48][0][][] */ 13,-27,19,-127,-18,-26,-5,9,22,-23,6,-13,13,62,-7,65, 
  /* [49][0][][] */ 50,-30,4,105,93,7,-5,51,-69,10,18,37,-12,38,127,-4, 
  /* [50][0][][] */ -18,7,50,-41,2,108,2,-42,36,-5,127,34,88,2,-12,-35, 
  /* [51][0][][] */ 39,50,12,18,10,-6,-58,28,74,8,-11,127,26,41,54,-69, 
  /* [52][0][][] */ -9,38,125,32,13,-59,28,-38,-47,31,-23,25,-5,87,-127,-17, 
  /* [53][0][][] */ -4,-26,-19,-127,-53,-7,18,-24,-32,25,18,-14,19,-13,46,7, 
  /* [54][0][][] */ 6,10,-55,-65,16,53,-4,13,87,-25,16,-42,-36,127,11,43, 
  /* [55][0][][] */ 4,-62,-48,-11,22,-73,-22,-127,5,-85,-30,27,-41,-70,-73,-17, 
  /* [56][0][][] */ 35,48,33,52,5,-25,17,127,27,-26,10,-31,85,-19,-47,40, 
  /* [57][0][][] */ 91,-26,127,18,-46,-14,-26,-23,54,29,-71,18,29,-27,17,-30, 
  /* [58][0][][] */ 67,96,54,127,-103,-22,-34,12,55,-11,82,-12,-44,-54,-42,-113, 
  /* [59][0][][] */ 127,-47,-24,-1,-34,-24,-4,17,-44,28,-115,-12,0,11,12,33, 
  /* [60][0][][] */ -127,4,-2,48,32,33,48,52,27,44,126,-48,-61,8,27,-21, 
  /* [61][0][][] */ -119,82,41,14,12,-39,-64,-75,117,-127,52,-24,92,-27,-90,-37, 
  /* [62][0][][] */ -7,-7,-97,30,79,127,-15,101,10,-74,38,19,-91,-6,-108,9, 
  /* [63][0][][] */ -40,18,127,-36,-63,-40,40,-23,13,7,2,14,-19,-43,59,3, 
  /* [64][0][][] */ 39,53,-25,33,70,6,54,-96,-7,91,5,-6,-52,-127,13,42, 
  /* [65][0][][] */ 9,30,16,-31,65,9,-9,-127,-22,-72,-27,-49,7,-32,41,12, 
  /* [66][0][][] */ -127,2,-19,7,-39,21,17,-37,-63,-31,-67,53,52,16,48,66, 
  /* [67][0][][] */ 2,-57,16,127,4,3,-24,36,32,18,7,-11,-4,-27,-69,-38, 
  /* [68][0][][] */ 17,-4,-4,127,-57,-18,-1,-28,-54,24,-19,-4,-10,-51,-25,-56, 
  /* [69][0][][] */ 68,59,55,127,61,2,43,-123,9,61,-18,68,-1,-4,21,-28, 
  /* [70][0][][] */ 6,-28,-24,-66,41,8,18,-7,38,-20,44,-28,-41,63,37,127, 
  /* [71][0][][] */ 8,55,20,96,54,-127,-49,105,49,-91,19,22,18,-46,-71,24, 
  /* [72][0][][] */ -127,-46,-23,43,10,23,-18,12,-36,-22,-72,22,60,10,-10,87, 
  /* [73][0][][] */ -10,-15,-12,68,21,-15,14,-6,77,27,-19,10,13,127,-65,-17, 
  /* [74][0][][] */ 53,-37,46,-33,-33,-9,32,-22,-45,-9,-87,43,-127,-4,-1,17, 
  /* [75][0][][] */ -38,-24,-24,127,-35,5,2,-35,-85,9,7,-33,-1,-58,-20,-34, 
  /* [76][0][][] */ 14,-23,26,40,11,8,-25,-95,1,-127,-9,34,-40,-13,37,-39, 
  /* [77][0][][] */ 127,0,41,42,-15,22,-70,-33,62,-3,-44,91,23,-1,-55,4, 
  /* [78][0][][] */ -25,21,34,-10,5,3,-52,39,53,-15,-11,-30,22,127,25,-30, 
  /* [79][0][][] */ 3,22,57,28,52,70,-52,-48,20,-46,73,-9,127,-18,-37,-45, 
  /* [80][0][][] */ -80,-76,-33,127,42,74,-7,-19,-28,30,-92,40,76,-53,-16,25, 
  /* [81][0][][] */ 73,4,-80,16,87,64,-51,-25,-26,-127,-48,-86,-31,2,-82,53, 
  /* [82][0][][] */ 124,127,11,55,-113,-40,-111,-33,-42,1,125,-58,-61,108,-14,-59, 
  /* [83][0][][] */ 127,32,15,-25,8,-12,-10,24,34,10,79,-40,-50,-29,-26,-80, 
  /* [84][0][][] */ 3,-64,-70,-34,59,45,5,-127,-23,-101,39,8,-39,24,-2,-31, 
  /* [85][0][][] */ -33,-11,-33,-45,1,-23,64,86,-11,127,10,-71,18,73,87,-11, 
  /* [86][0][][] */ 71,-39,8,-10,-3,-47,14,-30,-13,-7,-127,8,13,35,0,22, 
  /* [87][0][][] */ 1,33,61,-61,-29,124,-54,69,21,-50,13,3,-15,-127,29,-8, 
  /* [88][0][][] */ -6,-39,-114,-62,42,-9,-4,-127,-6,-45,-7,-56,-37,3,40,-29, 
  /* [89][0][][] */ 45,-25,23,-127,57,-4,-66,97,89,-84,38,12,3,14,20,26, 
  /* [90][0][][] */ -6,-15,-18,58,51,-31,102,-79,51,127,-46,58,31,3,-25,2, 
  /* [91][0][][] */ 50,-35,-32,-4,38,-127,-14,-12,-11,-5,-66,13,21,-18,8,20, 
  /* [92][0][][] */ 8,21,127,34,39,29,-16,25,-5,18,-70,39,29,55,1,9, 
  /* [93][0][][] */ 127,-35,-55,-28,-52,-74,17,58,-40,57,-122,-11,6,51,-13,71, 
  /* [94][0][][] */ 12,-16,54,83,98,-23,-13,60,8,-14,-3,54,7,127,-29,-70, 
  /* [95][0][][] */ -109,28,43,47,14,43,29,16,4,23,127,-20,-37,46,-27,-25, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00048925715964287519, 0.0005784094100818038, 0.00064655311871320009, 0.0027632121928036213, 0.0010783277684822679, 0.0005794445751234889, 0.00059678201796486974, 0.0019231390906497836, 0.0010342353489249945, 0.00032767100492492318, 0.00079004449071362615, 0.0023280682507902384, 0.0012435215758159757, 0.00036353329778648913, 0.00083322246791794896, 0.0011304588988423347, 0.00062305480241775513, 0.00062750809593126178, 0.0004859066684730351, 0.0019284459995105863, 0.0016271594213321805, 0.00055992766283452511, 0.0010561782401055098, 0.00077750009950250387, 0.00065001077018678188, 0.0011083234567195177, 0.0012909425422549248, 0.00063061824766919017, 0.0023117156233638525, 0.0010732405353337526, 0.00066969107137992978, 0.00080275861546397209, 0.00048196731950156391, 0.0017828894779086113, 0.00059731898363679647, 0.0019672999624162912, 0.00038867376861162484, 0.0010850424878299236, 0.0014206439955160022, 0.00052041123853996396, 0.0017746266676113009, 0.00048898073146119714, 0.00044587126467376947, 0.00060073914937674999, 0.001007277867756784, 0.0008576114778406918, 0.00055420066928490996, 0.00089517782907932997, 0.00096553092589601874, 0.00093596812803298235, 0.0016100315842777491, 0.0020784677471965551, 0.00051572121446952224, 0.00073345500277355313, 0.00082650576950982213, 0.0003808317705988884, 0.0012379378313198686, 0.00061820109840482473, 0.00079102854942902923, 0.0014857673086225986, 0.0003552921989466995, 0.00064582965569570661, 0.0012308955192565918, 0.0016853042179718614, 0.00046146116801537573, 0.0007801626343280077, 0.0011161781148985028, 0.0012130949180573225, 0.00047209960757754743, 0.00045252678683027625, 0.00086054217536002398, 0.0010177817894145846, 0.0010088414419442415, 0.0012978847371414304, 0.00071999919600784779, 0.001404724782332778, 0.00036085266037844121, 0.000842916255351156, 0.00040406681364402175, 0.0012751112226396799, 0.00065394042758271098, 0.0013896614545956254, 0.00060045876307412982, 0.0015208725817501545, 0.00066342385252937675, 0.0010191965848207474, 0.00088573247194290161, 0.00095009477809071541, 0.00045459315879270434, 0.0012485744664445519, 0.00053039408521726727, 0.0013483978109434247, 0.00051348813576623797, 0.00045723840594291687, 0.00094845250714570284, 0.00081090786261484027, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -34960, 5346, 2321, -7504, 105, -4147, -10472, -37289, 3006, 25648, 33720, -6921, -980, -21883, 33430, -39712, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00066961772972717881, 0.00091327220434322953, 0.00093930517323315144, 0.0010196509538218379, 0.00090489996364340186, 0.001197435543872416, 0.00099689001217484474, 0.00059037079336121678, 0.00053292402299121022, 0.00058574369177222252, 0.00083288975292816758, 0.00054340512724593282, 0.0011862792307510972, 0.0012293929466977715, 0.00061525421915575862, 0.00055823556613177061, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -16,-4,-12,14,20,-5,-15,101,-47,24,34,-11,13,-4,-11,8,11,-14,-16,-6,50,-4,18,116,-18,88,-13,-13,21,-21,16,-25,-20,48,15,-45,13,50,25,-19,-110,-26,20,40,35,22,-127,-37, 
  /* [1][0][][] */ -41,-11,14,11,-37,14,0,58,-54,-40,7,-45,-19,-20,0,11,-22,124,-14,13,7,9,-24,-21,27,-42,26,26,-25,-82,-43,7,-20,-9,30,-8,-10,-40,2,19,-21,-30,127,10,3,-5,22,-5, 
  /* [2][0][][] */ -19,-11,-13,-33,-2,-69,0,-22,-1,16,12,23,14,18,-12,7,-5,-20,-24,-17,-7,0,3,-127,-16,77,-15,6,-2,-23,-6,1,-9,57,8,0,24,13,29,-1,-38,0,-19,-9,2,-10,13,10, 
  /* [3][0][][] */ -8,31,-2,-31,-2,1,2,-3,-22,-1,1,37,-127,8,-4,-5,1,7,-21,2,-32,7,8,15,-10,-11,7,25,-9,19,3,16,4,-1,16,17,-13,27,42,6,9,6,25,-30,11,-8,4,27, 
  /* [4][0][][] */ 36,-34,13,9,14,24,27,-20,-33,2,-17,-22,2,16,2,11,22,-4,-82,3,-10,11,18,78,-6,-24,3,47,13,-76,14,8,4,-36,36,-127,10,33,-2,9,-18,24,12,-24,-7,-22,4,6, 
  /* [5][0][][] */ 28,-3,-21,54,-1,-7,15,19,-5,-4,44,4,11,48,0,1,-16,24,30,-2,16,3,2,-27,5,-46,2,-18,2,-12,0,4,57,-127,0,29,-12,-12,12,7,-92,54,15,-5,-9,-2,-100,-9, 
  /* [6][0][][] */ 25,-5,5,7,-10,-6,7,-16,-5,7,-3,3,-17,8,10,5,3,-12,127,11,4,15,17,-32,5,2,24,-15,-16,-6,-2,10,-2,-9,30,-34,4,-42,65,16,2,-8,-6,11,-7,-1,6,-5, 
  /* [7][0][][] */ -44,-16,-14,28,-8,77,3,45,-4,29,-7,127,79,1,-10,7,-5,-16,-12,-21,-26,-7,-29,60,-2,-31,-48,-25,-6,-11,-11,-25,-3,3,-28,3,7,-54,91,1,17,20,-67,-64,20,-14,0,11, 
  /* [8][0][][] */ -50,-44,-4,3,-6,5,0,30,-2,-70,7,44,45,10,5,21,-15,54,-32,-6,-48,12,-13,-15,10,9,6,46,-12,114,-11,17,-4,-1,-16,-127,-110,65,33,30,17,-2,104,-22,0,25,10,30, 
  /* [9][0][][] */ -23,8,-12,25,15,-30,2,-2,50,-38,11,55,-59,0,22,15,3,11,-41,-22,56,11,-14,-18,5,7,53,-24,9,10,6,-7,-1,18,76,-106,-9,-127,-93,12,-29,25,52,8,16,3,-14,-42, 
  /* [10][0][][] */ -19,-10,-40,-127,49,84,19,-14,-3,30,23,8,50,-55,-38,43,38,-41,60,-33,37,-31,42,57,-49,-103,7,-33,53,35,46,-49,-35,-78,25,-7,17,-41,4,-35,-26,-68,-16,9,14,11,9,-30, 
  /* [11][0][][] */ 1,56,-6,65,17,-68,-70,-22,7,57,-15,-2,-12,60,7,-70,14,35,4,-29,-52,-107,9,-2,25,-37,26,-15,62,-43,21,-120,50,-19,-34,-107,94,21,6,-127,-4,65,105,-74,1,-73,27,39, 
  /* [12][0][][] */ 127,5,-12,8,-10,22,-3,103,17,-7,-55,-21,-1,20,-2,-6,-8,8,-12,-18,1,3,-6,15,0,10,3,5,3,14,2,-5,7,-66,-8,7,-20,-13,-30,2,-23,-77,9,-119,-39,-14,80,-6, 
  /* [13][0][][] */ 11,1,-2,7,9,-11,1,0,-1,8,3,20,-4,4,7,2,10,2,12,5,10,-10,9,-2,-1,0,16,127,9,-6,8,0,3,2,-40,23,10,-4,5,-17,-12,-5,0,6,0,-3,-8,-10, 
  /* [14][0][][] */ 67,-25,50,-65,52,22,36,-91,-49,-53,-12,119,-66,-2,58,17,47,30,-48,68,20,17,76,-10,25,64,-38,-112,35,-38,63,43,-11,75,-127,-46,-31,45,89,7,-31,5,50,0,7,6,9,-41, 
  /* [15][0][][] */ -5,-53,-69,-43,60,28,83,-59,-12,19,-12,-34,91,10,-95,60,57,60,82,-91,-101,-29,56,-14,-98,33,23,52,61,56,49,-38,26,60,93,127,-22,-106,-13,-31,92,65,117,-47,-7,-27,-13,59, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.028458753600716591, 0.038814067840576172, 0.039920467883348465, 0.043335165828466415, 0.038458246737718582, 0.050891008228063583, 0.042367823421955109, 0.025090757757425308, 0.022649271413683891, 0.024894105270504951, 0.035397812724113464, 0.023094717413187027, 0.050416868180036545, 0.052249200642108917, 0.026148304343223572, 0.023725012317299843, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 5249, 37357, -790, 41502, 4317, 127887, -1414, 51831, 3564, 34655, 23942, -77, -2515, 31151, -2185, -818, -666, 796, 1181, -1818, 556, -2802, -1027, -20926, -5709, 44776, 133189, 105426, 1715, 4269, -2598, 67, 23344, 3, 36394, 613, 47910, 983, 51294, 3027, 1241, 60772, 1447, 4451, 50982, 371, 3876, 49034, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.7617074819281697e-05, 3.8108279113657773e-05, 0.00015729235019534826, 5.4254884162219241e-05, 0.00014491635374724865, 6.7122331529390067e-05, 0.0001890091662062332, 0.0001115339546231553, 7.6375661592464894e-05, 3.7461737520061433e-05, 4.3347608880139887e-05, 0.00010180851677432656, 4.3914886191487312e-05, 3.4085871448041871e-05, 0.00017003358516376466, 0.00024677327019162476, 0.00017713000124786049, 7.5382442446425557e-05, 0.00013126806879881769, 0.00015045696636661887, 9.4509938207920641e-05, 0.00017025797569658607, 0.00010490836575627327, 0.00013416520960163325, 7.849631947465241e-05, 0.00010001788905356079, 3.3943077141884714e-05, 6.4769912569317967e-05, 0.00011036544310627505, 0.00010230794578092173, 0.00011952294880757108, 0.00014199370343703777, 4.4351942051434889e-05, 0.00014675415877718478, 2.9028653443674557e-05, 5.352598600438796e-05, 0.00012287656136322767, 9.9073142337147146e-05, 0.00011317323514958844, 0.00011075934889959171, 0.00010771656525321305, 9.6279109129682183e-05, 7.6288997661322355e-05, 7.7169032010715455e-05, 3.238489807699807e-05, 0.00016677196254022419, 9.2389644123613834e-05, 3.1162799132289365e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-93,98,71,53,-35,107,-68,61,-88,-81,47,51,-42,-70,-90,102,76,49,78,66,-76,-82,51,-31,-40,-63,-64,-67,61,-63,-113,-12,41,71,63,-66,52,-50,-23,48,-75,60,62,-94,10,76,-35, 84,-95,127,85,-77,-68,-57,-85,95,-104,-63,73,78,-106,-94,91,-37,94,82,127,85,-116,53,72,-51,-77,-69,-80,56,79,-30,-127,-86,78,83,84,-82,82,-83,-17,74,-95,82,91,-73,-127,92,-102, 37,-47,70,35,19,-42,-49,-39,43,-32,3,32,31,-81,-53,1,-54,36,35,69,36,-53,32,26,-27,-46,-46,-23,32,31,89,-89,-85,45,36,35,-30,39,-36,-11,39,-41,36,45,-8,-9,34,-74, 
  /* [0][1][][] */ 95,-113,-44,95,55,-82,127,-93,86,-110,-71,81,83,-112,-12,-127,127,108,74,-38,85,107,-127,73,74,-76,-94,-99,-127,85,-70,-9,-86,69,107,95,-85,78,-80,90,82,-103,89,90,-85,106,93,-93, 127,-127,-66,127,-127,-127,-93,-127,127,-127,-127,127,127,-127,-22,96,-65,127,127,-50,127,127,70,127,127,-127,-127,-127,54,127,-29,15,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-80,-34,67,38,-64,-49,-65,57,-41,-59,57,51,-54,-15,11,-63,50,57,-30,56,65,51,63,67,-68,-63,-45,37,54,127,14,-62,70,48,50,-49,60,-59,57,58,-59,55,64,-63,-67,57,-56, 
  /* [0][2][][] */ 44,-53,-50,49,27,-53,65,-44,40,-71,-2,39,55,-74,82,-79,73,48,36,-30,27,-12,-77,29,-25,-45,-52,-49,-74,33,-40,90,-71,36,48,43,-28,36,-42,-87,47,-51,41,47,-23,16,41,-73, 71,-74,-50,80,-56,-64,-72,-69,51,-76,-63,61,74,-49,127,32,-46,58,61,-43,55,-18,43,65,-49,-66,-81,-61,32,61,-23,118,-55,65,58,58,-50,61,-66,-107,68,-66,61,62,-86,48,64,-50, 41,-41,-28,46,29,-21,-16,-37,15,-25,-52,27,33,3,66,26,-35,22,29,-31,28,-1,41,41,-26,-31,-50,-24,34,35,63,65,1,37,17,23,-24,29,-29,-56,28,-32,26,30,-66,8,30,-3, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0028737254906445742, 0.0016196018550544977, 0.0066849249415099621, 0.0023058324586600065, 0.0061589446850121021, 0.0028526990208774805, 0.0080328891053795815, 0.0047401930205523968, 0.0032459655776619911, 0.001592123880982399, 0.0018422733992338181, 0.0043268618173897266, 0.0018663826631382108, 0.0014486495638266206, 0.0072264270856976509, 0.010487863793969154, 0.0075280251912772655, 0.0032037536147981882, 0.0055788927711546421, 0.0063944212161004543, 0.0040166722610592842, 0.0072359638288617134, 0.0044586053118109703, 0.0057020215317606926, 0.0033360936213284731, 0.0042507601901888847, 0.0014425807166844606, 0.0027527210768312216, 0.004690531175583601, 0.004348087590187788, 0.0050797252915799618, 0.0060347323305904865, 0.0018849574262276292, 0.0062370519153773785, 0.0012337177759036422, 0.0022748543415218592, 0.00522225396707654, 0.0042106085456907749, 0.0048098624683916569, 0.0047072721645236015, 0.0045779538340866566, 0.0040918621234595776, 0.0032422821968793869, 0.0032796838786453009, 0.0013763582101091743, 0.0070878081023693085, 0.003926559817045927, 0.0013244189321994781, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 592, 836, 1830, 584, 11472, 15199, 2466, -39, -815, -541, 1024, 1026, 3148, 981, 27425, 3230, 1665, -1286, -288, 2858, -1711, 10705, 8073, 9601, 5317, 349, 3482, 3847, 9771, -477, 8289, 4223, 426, -203, 5253, 3364, -1681, 170, -834, 4850, 623, -385, -973, 20, 1044, 3085, 510, 927, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00042159491567872465, 0.0008068075985647738, 0.00029974032077006996, 0.00029421882936730981, 0.00019241080735810101, 0.00026783865178003907, 0.00044628611067309976, 0.00024280247453134507, 0.00034467517980374396, 0.00072247750358656049, 0.00087394786532968283, 0.00029129922040738165, 0.00040426122723147273, 0.00079160073073580861, 0.00013159976515453309, 0.00039635939174331725, 0.00029153632931411266, 0.00032319719321094453, 0.00026519477250985801, 0.00031926733208820224, 0.00037229130975902081, 0.00023829501878935844, 0.00045597768621519208, 0.00016366280033253133, 0.00030608248198404908, 0.00031709772883914411, 0.002004686975851655, 0.00048241295735351741, 0.00017981551354750991, 0.00045843303087167442, 0.00031595185282640159, 0.000272168661467731, 0.00083176931366324425, 0.00027559473528526723, 0.00070405908627435565, 0.00054107059258967638, 0.00081152195343747735, 0.00040529874968342483, 0.00021945557091385126, 0.00038608105387538671, 0.00020312113338150084, 0.00028559082420542836, 0.00033877542591653764, 0.00031913694692775607, 0.0018405432347208261, 0.00045591098023578525, 0.00037668953882530332, 0.0012417803518474102, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,1,-8,63,-38,37,25,-27, 
  /* [1][0][][] */ 45,99,62,10,24,-29,127,126, 
  /* [2][0][][] */ -42,7,0,11,-127,-19,19,14, 
  /* [3][0][][] */ 111,-11,-8,-123,-127,15,34,-18, 
  /* [4][0][][] */ -127,72,-8,-10,122,-4,80,16, 
  /* [5][0][][] */ -108,-28,13,-8,-127,9,5,83, 
  /* [6][0][][] */ -15,-127,22,-4,9,-7,8,45, 
  /* [7][0][][] */ -65,-15,0,114,127,-34,-38,3, 
  /* [8][0][][] */ 91,3,-2,-127,13,-21,-53,-41, 
  /* [9][0][][] */ -11,-127,-6,4,4,93,-49,80, 
  /* [10][0][][] */ -120,-17,-3,17,-127,80,84,9, 
  /* [11][0][][] */ 107,16,37,17,-63,-50,-29,-127, 
  /* [12][0][][] */ 0,18,44,-5,8,-88,127,67, 
  /* [13][0][][] */ 65,-15,1,-32,114,127,115,-46, 
  /* [14][0][][] */ 127,58,-18,28,-118,-11,-33,-41, 
  /* [15][0][][] */ -17,-127,11,-16,4,8,-11,32, 
  /* [16][0][][] */ -51,-22,5,7,-127,12,24,4, 
  /* [17][0][][] */ -21,95,-91,13,16,-127,104,-77, 
  /* [18][0][][] */ 127,-28,-48,17,-67,24,6,99, 
  /* [19][0][][] */ 127,-49,-32,-5,62,-12,38,42, 
  /* [20][0][][] */ 127,10,-15,116,8,31,0,-57, 
  /* [21][0][][] */ -5,43,-47,8,-13,93,-127,-113, 
  /* [22][0][][] */ -127,31,29,-5,-34,-3,-42,-20, 
  /* [23][0][][] */ -40,-61,8,19,-127,67,79,-16, 
  /* [24][0][][] */ 127,-14,-14,-10,-84,-9,-11,-4, 
  /* [25][0][][] */ 24,-10,-3,-24,127,46,53,-25, 
  /* [26][0][][] */ 6,-119,22,-46,9,-127,83,-64, 
  /* [27][0][][] */ -16,-127,32,-12,-3,-53,32,-8, 
  /* [28][0][][] */ -114,39,-13,29,-8,-41,127,114, 
  /* [29][0][][] */ -2,44,10,14,2,44,-104,-127, 
  /* [30][0][][] */ 127,-26,-20,12,-78,-13,-38,-11, 
  /* [31][0][][] */ -11,-41,51,-4,14,-88,127,56, 
  /* [32][0][][] */ -78,20,9,6,-127,-91,-89,46, 
  /* [33][0][][] */ -27,15,-6,15,-127,-54,-49,18, 
  /* [34][0][][] */ 11,-127,57,-2,-1,91,-74,63, 
  /* [35][0][][] */ -23,-47,-127,-6,-2,-74,48,-56, 
  /* [36][0][][] */ 9,127,52,9,-8,13,-24,-37, 
  /* [37][0][][] */ -127,31,32,-13,53,-26,-9,-106, 
  /* [38][0][][] */ -127,-20,-46,-13,42,26,35,114, 
  /* [39][0][][] */ -14,-15,56,2,5,-83,127,89, 
  /* [40][0][][] */ -27,-25,-15,-39,-127,125,121,-39, 
  /* [41][0][][] */ -127,47,14,-72,-98,-76,-89,34, 
  /* [42][0][][] */ -34,-127,-91,-7,-13,77,-116,-75, 
  /* [43][0][][] */ -68,0,-24,-127,92,58,60,4, 
  /* [44][0][][] */ 127,-30,9,-117,38,-36,-20,46, 
  /* [45][0][][] */ -29,-127,10,3,-20,-79,84,-6, 
  /* [46][0][][] */ 108,-8,-4,-28,127,-30,-29,2, 
  /* [47][0][][] */ 119,-1,-13,127,-13,20,19,-44, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00072649121284484863, 0.0013902887003496289, 0.00051651173271238804, 0.00050699710845947266, 0.00033156177960336208, 0.00046153884613886476, 0.00076903903391212225, 0.00041839657933451235, 0.00059394334675744176, 0.0012449712958186865, 0.0015059845754876733, 0.00050196604570373893, 0.00069662183523178101, 0.001364084193482995, 0.00022677236120216548, 0.0006830054335296154, 0.00050237460527569056, 0.00055693252943456173, 0.00045698293251916766, 0.00055016059195622802, 0.00064153136918321252, 0.00041062931995838881, 0.00078573951032012701, 0.0002820233057718724, 0.00052744051208719611, 0.00054642197210341692, 0.0034544712398201227, 0.00083129270933568478, 0.00030985759804025292, 0.00078997056698426604, 0.00054444739362224936, 0.0004690003115683794, 0.0014333026483654976, 0.0004749041108880192, 0.0012132327537983656, 0.00093237136024981737, 0.0013984123943373561, 0.00069840968353673816, 0.000378165248548612, 0.0006652938318438828, 0.00035001779906451702, 0.00049212935846298933, 0.00058377691311761737, 0.00054993591038510203, 0.0031716190278530121, 0.00078562455018982291, 0.00064911041408777237, 0.002139832591637969, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -42704, 27487, -11760, -13012, 18275, -569, 32221, 42828, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.0004432649293448776, 0.0006619290797971189, 0.0015674389433115721, 0.0015998393064364791, 0.00081654882524162531, 0.00062282395083457232, 0.00060013908660039306, 0.00098259840160608292, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -48,-13,-50,16,7,-19,0,3,-117,127,-53,115,117,10,91,-20,-13,-40,-10,-1,-4,5,-29,-32,29,-108,21,75,-13,6,24,-32,13,-78,124,25,1,1,-10,-26,124,5,68,-28,-34,25,-17,-15, 
  /* [1][0][][] */ -1,35,125,4,2,-35,6,-79,25,0,19,7,-23,9,-6,-127,18,-63,8,0,-30,25,33,-39,-15,-11,10,7,8,-9,14,-8,-2,11,12,7,-17,-33,63,-56,12,40,-8,25,-16,8,25,-4, 
  /* [2][0][][] */ -3,-47,14,-43,28,24,-5,-29,7,-2,-2,13,-8,57,1,-3,-37,127,-22,-34,-16,21,-34,-8,113,1,1,-8,-30,-8,0,-45,-4,-14,-5,9,-8,-2,-14,8,16,-17,-20,-4,4,27,-25,-33, 
  /* [3][0][][] */ 6,-83,1,7,5,-2,-5,5,-4,-13,17,18,10,-11,51,4,-4,-23,2,22,-9,22,-19,0,7,52,-3,8,-3,4,127,6,8,12,-7,-8,-24,-11,-9,10,-6,2,-10,26,-12,1,0,36, 
  /* [4][0][][] */ -101,10,-1,8,-1,-34,6,6,42,-36,22,-12,-34,6,-13,-12,0,7,-5,24,9,-21,3,7,-3,44,7,112,1,10,1,-21,7,-127,-27,16,3,-3,-1,-8,-53,-7,-5,18,-62,8,14,2, 
  /* [5][0][][] */ -26,26,14,-6,-49,26,-5,53,20,2,11,4,-7,-37,3,28,-2,-91,19,8,46,-35,15,43,16,3,-75,-49,-36,-28,19,11,-2,-61,2,-65,68,8,-40,17,18,-43,7,3,127,-12,-36,-7, 
  /* [6][0][][] */ -27,-22,-6,5,42,-24,-2,-33,-5,-12,35,-11,-21,43,7,-64,-4,9,-8,-26,-33,56,-26,-81,4,-15,-59,-68,31,52,-9,8,-1,-63,-15,74,-76,-44,12,-69,-9,6,28,45,127,-30,51,4, 
  /* [7][0][][] */ 19,37,-78,31,-24,21,6,71,-10,-1,70,-38,5,-36,-14,-5,-22,-127,37,-39,65,47,16,-59,17,-19,25,-3,-17,28,-20,12,5,41,-6,-25,-13,-56,-46,-59,-12,-36,39,67,-38,-32,-17,6, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.018838759511709213, 0.028131986036896706, 0.066616155207157135, 0.067993171513080597, 0.034703325480222702, 0.026470016688108444, 0.025505911558866501, 0.041760429739952087, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -51528, -70, 8452, 600, 5315, -6086, 1772, 24739, 1292, 43116, -2877, 27818, -6771, -1692, 26544, 5425, 239, 15946, 37001, 11171, 178, -577, -197, 17195, -8067, 23936, 45952, 31674, 3257, 2957, -1146, 974, 960, 15726, -7397, 15743, -11005, 18325, -22284, 120466, 21297, 19834, 10744, -1881, 13730, 3456, 1445, -453, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0003721968678291887, 0.00028218564693816006, 0.00018839053518604487, 0.00025017783627845347, 0.00013624955317936838, 0.0001003133729682304, 0.00061266234843060374, 0.00014082046982366592, 0.00012908797361887991, 0.0001142780456575565, 9.1232213890179992e-05, 0.00015483284369111061, 0.00027255859458819032, 0.00013911515998188406, 9.4805713160894811e-05, 0.00030818951199762523, 0.00022085603268351406, 0.00025610820739530027, 6.22342704446055e-05, 0.00016984264948405325, 0.00017560960259288549, 0.00020161065913271159, 0.00018665437528397888, 0.00012438390695024282, 0.00015347248699981719, 0.0001518300996394828, 0.0005529616610147059, 0.00011041192919947207, 0.00016917297034524381, 0.000283860630588606, 0.00010156240750802681, 0.00020968589524272829, 0.00089611130533739924, 0.00018248632841277868, 0.00017049336747732013, 0.00015760365931782871, 0.00034224020782858133, 0.00013463468349073082, 0.00029786533559672534, 2.0394094462972134e-05, 0.0001520575606264174, 5.5220974900294095e-05, 0.0001488066918682307, 0.00015257227641995996, 0.00017174602544400841, 0.00010245727753499523, 0.00020559014228638262, 0.00010129065776709467, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,20,109,5,82,0,28,16,8,11,8,-7,-9,-45,9,-2,8,-22,-113,-6,-22,127,-10,-3,7,-5,8,-5,4,16,99,20,29,39,-27,1,34,-2,0,17,-67,-8,-9,17,2,-6,-10, 127,9,15,-127,28,87,11,10,124,127,8,43,-49,-24,5,8,127,-56,-58,-56,-99,25,-108,15,17,73,-32,-83,24,21,8,-124,5,-60,127,10,-40,-47,-6,115,-79,-97,-31,3,-34,-9,-127,23, -31,-3,7,15,-1,64,5,17,28,9,-14,31,-13,-3,16,4,-103,28,-2,77,-32,-11,-17,-6,-5,-59,-3,29,-16,5,4,-21,8,-23,16,-18,0,47,42,-12,50,39,-15,11,-43,3,-1,-5, 
  /* [0][1][][] */ 123,7,0,-99,15,-26,36,-16,9,9,-11,54,-7,-1,18,-33,0,-50,-59,-85,11,-72,-124,-18,4,100,-15,-127,-8,32,12,-106,17,-52,-2,127,-3,58,-42,40,-63,-127,39,-87,-43,-15,-12,-5, 26,-127,-127,114,-127,-127,-127,-127,-127,-95,127,-127,127,127,35,-127,-82,127,127,-106,127,127,112,127,127,-127,-127,28,-127,-127,92,127,-127,127,-29,-41,127,-127,127,127,127,-79,127,127,127,-121,102,106, 53,5,49,-14,6,-62,45,18,-23,15,-105,-8,0,-40,127,4,63,-65,-70,85,14,-45,12,-33,1,7,-38,68,21,40,0,4,32,-43,9,67,-5,64,69,-9,-81,10,-86,-31,27,-15,-10,6, 
  /* [0][2][][] */ -53,-7,25,-17,7,34,-37,22,9,-23,12,33,6,-6,-37,18,5,21,-13,106,5,-31,-16,-12,-4,23,0,50,-9,3,47,-31,-18,-43,-32,-39,-1,31,8,-22,9,-2,43,-36,-35,17,-11,18, 68,126,75,21,17,-20,125,35,19,-3,44,27,-5,-1,-90,25,-57,-56,-36,123,-37,49,12,19,31,-63,-40,29,78,1,127,22,85,-25,7,-36,-25,-17,-14,119,-27,-11,-42,45,21,-32,8,-127, -42,-3,7,-4,5,-7,-61,7,-18,-10,-40,-39,20,-9,-8,11,34,24,-8,-127,23,-9,5,-9,-7,10,-10,-54,-14,8,7,9,-20,87,-37,-22,-4,36,24,-59,5,10,-39,7,-42,127,-3,-3, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015818366780877113, 0.011992889456450939, 0.0080065978690981865, 0.010632557794451714, 0.0057906061410903931, 0.0042633181437849998, 0.026038149371743202, 0.0059848697856068611, 0.0054862387478351593, 0.0048568169586360455, 0.003877368988469243, 0.0065803956240415573, 0.011583739891648293, 0.0059123942628502846, 0.0040292427875101566, 0.013098054565489292, 0.009386381134390831, 0.010884598828852177, 0.0026449565775692463, 0.0072183124721050262, 0.0074634077027440071, 0.0085684526711702347, 0.0079328110441565514, 0.0052863159216940403, 0.0065225805155932903, 0.0064527792856097221, 0.023500870913267136, 0.0046925069764256477, 0.0071898512542247772, 0.012064076960086823, 0.0043164021335542202, 0.0089116506278514862, 0.038084730505943298, 0.0077556688338518143, 0.0072459680959582329, 0.0066981553100049496, 0.014545208774507046, 0.0057219741865992546, 0.012659275904297829, 0.00086674903286620975, 0.0064624459482729435, 0.0023468914441764355, 0.0063242842443287373, 0.0064843217842280865, 0.0072992057539522648, 0.0043544340878725052, 0.0087375808507204056, 0.0043048528023064137, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 42636, 7188, 5562, 6234, 1701, 8687, -1669, -247, 976, 2187, 3423, 395, 1739, -833, 735, -2002, 4038, 9955, -273, 26835, 4300, 2244, 9138, -581, 3534, 5545, 20048, 9077, -68, -2538, 113, 2007, -2011, 8172, 2543, 7913, 7667, 3764, 25872, 1827, -1042, 2854, 1184, 3170, 3492, 2668, -1302, 2695, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00010091017611557618, 0.00031975033925846219, 0.00028061922057531774, 0.00051757192704826593, 0.0013124441029503942, 0.00058134994469583035, 0.0011718820314854383, 0.0012177199823781848, 0.00058002996956929564, 0.00062617030926048756, 0.00065607670694589615, 0.00050137186190113425, 0.0005385305848903954, 0.00059377623256295919, 0.00057414767798036337, 0.001825135899707675, 0.00039225578075274825, 0.00042744659003801644, 0.0019602321553975344, 0.0001008439066936262, 0.00027775287162512541, 0.00043061148608103395, 0.00043467653449624777, 0.00094759085914120078, 0.00034369350760243833, 0.0002187273494200781, 0.00020133251382503659, 0.00040027333307079971, 0.0011076292721554637, 0.0010285831522196531, 0.0005763248773291707, 0.00041462524677626789, 0.0010069352574646473, 0.00026923057157546282, 0.00041431337012909353, 0.00023585688904859126, 0.00048237736336886883, 0.00035002324148081243, 9.1252033598721027e-05, 0.00248752161860466, 0.00059210770996287465, 0.00097641011234372854, 0.00042876091902144253, 0.00045820011291652918, 0.00034484916250221431, 0.00041809599497355521, 0.00086131639545783401, 0.0009858031990006566, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 66,13,11,3,127,30,-35,1, 
  /* [1][0][][] */ 0,0,-2,127,7,-5,6,12, 
  /* [2][0][][] */ 27,-127,-23,49,-10,-72,87,-1, 
  /* [3][0][][] */ 127,-40,0,14,-12,-33,32,12, 
  /* [4][0][][] */ 5,-49,127,-5,-13,-51,7,-108, 
  /* [5][0][][] */ 49,7,-1,4,127,4,4,4, 
  /* [6][0][][] */ -15,73,-15,127,33,63,-69,-38, 
  /* [7][0][][] */ -5,127,-5,2,-1,-7,16,1, 
  /* [8][0][][] */ 127,57,-15,5,-55,-20,12,-39, 
  /* [9][0][][] */ -127,8,12,26,63,7,-4,17, 
  /* [10][0][][] */ -78,-12,-4,127,58,27,-40,-24, 
  /* [11][0][][] */ -127,17,17,-83,37,-2,-18,-60, 
  /* [12][0][][] */ 127,30,1,17,-50,-17,1,-45, 
  /* [13][0][][] */ -10,74,-127,-3,8,108,-71,80, 
  /* [14][0][][] */ -46,-38,-4,127,33,8,-12,-21, 
  /* [15][0][][] */ -1,127,1,-2,-1,-12,6,-55, 
  /* [16][0][][] */ -7,-127,-24,9,-23,-87,93,-16, 
  /* [17][0][][] */ 14,127,-1,-8,13,65,-78,-16, 
  /* [18][0][][] */ -8,39,-127,0,6,53,-25,76, 
  /* [19][0][][] */ -115,22,9,13,-127,2,24,40, 
  /* [20][0][][] */ -127,-11,-4,-13,87,-36,43,-9, 
  /* [21][0][][] */ -52,2,1,11,-127,3,15,-5, 
  /* [22][0][][] */ -127,-17,12,4,108,-19,39,50, 
  /* [23][0][][] */ -25,-22,-3,-11,-2,84,-127,-96, 
  /* [24][0][][] */ -9,37,-127,5,9,50,-22,73, 
  /* [25][0][][] */ 122,-31,-5,127,-69,4,8,-71, 
  /* [26][0][][] */ 8,-20,2,-5,-3,127,125,-27, 
  /* [27][0][][] */ 62,-10,-2,10,127,36,40,-24, 
  /* [28][0][][] */ -13,127,-65,20,11,83,-29,126, 
  /* [29][0][][] */ -7,8,-4,-10,-4,90,-127,-79, 
  /* [30][0][][] */ 1,0,-2,-127,-9,-2,-2,-19, 
  /* [31][0][][] */ -74,-8,18,24,-127,5,18,20, 
  /* [32][0][][] */ -3,29,7,-127,-4,33,-103,-92, 
  /* [33][0][][] */ -63,0,-7,-5,-127,31,49,-1, 
  /* [34][0][][] */ -127,84,2,21,36,-29,1,7, 
  /* [35][0][][] */ -28,122,-10,-19,-8,-127,66,-7, 
  /* [36][0][][] */ 4,55,5,-19,-5,108,-127,-36, 
  /* [37][0][][] */ 42,-68,-5,23,35,-100,127,-21, 
  /* [38][0][][] */ 29,-127,18,5,37,87,-66,62, 
  /* [39][0][][] */ 10,-127,-6,-4,-4,-6,-59,-110, 
  /* [40][0][][] */ 127,40,-6,-11,-33,99,-120,-107, 
  /* [41][0][][] */ 16,-123,22,-1,0,98,-67,127, 
  /* [42][0][][] */ 29,-7,-2,-127,-71,-15,11,-38, 
  /* [43][0][][] */ -87,-29,10,-127,61,27,-12,-16, 
  /* [44][0][][] */ -8,-21,-6,9,-31,79,127,-8, 
  /* [45][0][][] */ -127,-55,-24,-20,24,6,33,-24, 
  /* [46][0][][] */ 14,92,127,11,-9,-12,28,43, 
  /* [47][0][][] */ -2,-2,18,127,24,13,-8,-6, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00022938435722608119, 0.00072684173937886953, 0.00063789065461605787, 0.0011765207163989544, 0.0029833875596523285, 0.0013214979553595185, 0.0026638682466000319, 0.0027680648490786552, 0.0013184974668547511, 0.0014233815018087626, 0.0014913632767274976, 0.0011396954068914056, 0.0012241628719493747, 0.0013497447362169623, 0.0013051260029897094, 0.0041488148272037506, 0.00089165777899324894, 0.00097165192710235715, 0.0044559095986187458, 0.00022923373035155237, 0.00063137506367638707, 0.00097884621936827898, 0.00098808668553829193, 0.0021540198940783739, 0.0007812682306393981, 0.00049720093375071883, 0.00045765980030409992, 0.00090988288866356015, 0.0025178119540214539, 0.0023381279315799475, 0.0013100751675665379, 0.00094250700203701854, 0.0022889187093824148, 0.00061200250638648868, 0.00094179809093475342, 0.00053613900672644377, 0.0010965180117636919, 0.00079565669875591993, 0.00020742992637678981, 0.0056545194238424301, 0.0013459519250318408, 0.0022195305209606886, 0.00097463955171406269, 0.0010415593860670924, 0.00078389525879174471, 0.00095039652660489082, 0.0019579047802835703, 0.0022408824879676104, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -6406, -24067, 24172, 20448, 1937, 2344, 38536, 11827, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0010646292939782143, 0.00060941057745367289, 0.0015353168128058314, 0.0012328609591349959, 0.0013408890226855874, 0.0010861287591978908, 0.00078584824223071337, 0.00069854920729994774, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -12,-1,10,-96,8,26,5,6,1,7,4,-7,105,0,0,7,0,-9,-5,-1,80,-7,2,6,33,38,19,11,10,1,5,-127,9,10,-2,-2,-22,1,-14,34,7,-24,-8,8,-1,0,2,1, 
  /* [1][0][][] */ -37,-5,-4,-6,44,23,-34,74,19,3,-29,-27,13,0,20,37,0,38,23,-47,0,20,127,21,-24,-6,53,2,22,-6,18,-9,13,-6,-10,-26,1,-52,6,2,-2,-6,-84,-8,-35,11,-55,-92, 
  /* [2][0][][] */ -55,18,-2,8,37,-13,25,28,-11,52,6,-8,0,0,6,46,0,12,-127,19,-2,12,8,-12,-34,0,35,4,7,26,16,-4,5,-8,-15,-15,7,2,3,-1,34,-11,-30,-2,22,-51,20,10, 
  /* [3][0][][] */ 4,2,5,5,-8,24,4,-6,58,16,-2,3,29,0,-21,-6,0,3,-10,3,1,1,1,-13,-12,-2,-9,-1,-4,-3,-4,-8,-45,42,-56,-5,5,1,4,-127,1,0,5,-46,1,-1,1,6, 
  /* [4][0][][] */ -4,-6,87,36,4,-20,0,-7,4,0,-3,-5,-78,0,-11,7,0,8,8,6,67,0,3,-3,-22,37,-1,43,0,1,2,103,4,5,4,-3,21,-7,-6,-17,-4,-127,10,7,1,-4,2,-1, 
  /* [5][0][][] */ -8,42,8,-9,2,50,28,11,-25,32,4,59,29,0,-127,1,0,15,-36,24,-8,11,-15,39,-22,0,31,2,-12,23,26,-16,49,28,-40,-4,7,22,-50,19,26,-15,-10,31,20,58,22,25, 
  /* [6][0][][] */ -27,-59,4,11,40,-50,-17,6,30,-24,-12,88,-7,0,-127,41,0,-7,49,-19,-6,3,24,-28,23,5,-4,-6,47,-11,-16,-6,95,-33,31,2,0,-7,-68,-19,-15,-24,-1,-24,-17,-85,-15,-26, 
  /* [7][0][][] */ -120,-23,-14,14,127,17,74,25,15,5,30,-45,-33,0,90,108,0,15,1,65,-12,-2,-32,45,19,-1,44,7,51,70,57,-7,-7,-14,-25,-26,9,27,18,35,82,9,-27,-15,68,5,71,86, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.045246746391057968, 0.025899948552250862, 0.065250962972640991, 0.052396588027477264, 0.056987781077623367, 0.046160470694303513, 0.033398550003767014, 0.029688341543078423, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 75600, 54482, 60284, 43301, -507, 14019, 3543, 30654, 28952, 25896, 30121, 6107, -47300, -127, 32692, 333, -204, 29020, 1959, 1165, -14486, 3599, 50474, 35925, -24296, 24865, 40344, 20305, -2882, 16014, -6331, -50464, 8904, 114696, 30771, 868, 56189, -405, 173621, -25180, 14403, -27978, 2072, 101502, -1105, 85113, 1773, -22347, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.0457262811250985e-05, 7.2867449489422143e-05, 0.00021946177002973855, 9.9459182820282876e-05, 0.00011516879021655768, 0.00020478972874116153, 0.00010973123426083475, 5.4916647059144452e-05, 8.0024750786833465e-05, 3.2551994081586599e-05, 7.762484165141359e-05, 2.1976356947561726e-05, 0.00018766301218420267, 0.005541567225009203, 7.7538759796880186e-05, 0.00020901033713016659, 0.0027484172023832798, 1.9751758372876793e-05, 8.9705761638469994e-05, 0.00016726982721593231, 9.5322859124280512e-05, 0.00014759496843907982, 0.0001155527206719853, 3.4816130209947005e-05, 0.0001046015095198527, 0.00011289663234492764, 3.2729261874919757e-05, 3.9353577449219301e-05, 0.0002779067144729197, 4.7585665015503764e-05, 4.803808405995369e-05, 0.00020720869360957295, 0.00027124304324388504, 9.1910087576252408e-06, 8.0247707956004888e-05, 0.00022458721650764346, 1.6073256119852886e-05, 0.00043295539217069745, 2.646901884872932e-05, 8.9182321971748024e-05, 5.8550744142848998e-05, 0.00022711778001394123, 0.00010800593008752912, 9.8614964372245595e-06, 0.00015120938769541681, 6.9540859840344638e-05, 0.00018048469792120159, 0.00011880839883815497, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -44,-22,-6,-16,8,-39,-80,-69,-26,-50,8,66,35,-71,116,-42,-113,-85,37,-7,-1,-69,-111,-80,-35,-123,-62,-20,71,15,95,25,-127,-89,-8,58,18,48,-127,78,-76,-15,106,-109,-4,-34,-87,109, 76,11,-28,-28,58,-127,-127,-83,60,-77,-116,108,37,-82,0,62,-52,-114,60,6,11,-112,-127,-71,-4,-127,-120,-39,-53,21,-57,54,28,-127,64,88,13,72,-92,127,-127,6,124,-127,0,-22,-127,96, -34,41,6,-5,-64,-111,-59,-18,86,-9,-127,37,9,-71,-101,-11,-127,-27,29,11,-14,-77,-35,-25,-10,-29,-58,-10,-8,17,-24,8,106,-85,72,34,15,36,-4,16,-78,3,8,-79,-18,6,-56,15, 
  /* [0][1][][] */ -87,-127,-44,-46,-9,56,99,-106,-26,-110,-20,113,91,-64,28,-96,-121,-93,90,-77,42,-88,-102,-127,42,-114,-78,-37,127,-60,127,83,-43,-86,-14,86,-36,-77,-108,90,41,59,104,-107,-91,-116,80,120, 127,-83,-127,-127,127,43,93,-127,100,-127,-109,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-120,-120,127,-98,-127,-127,-118,-127,-71,127,28,-110,127,127,-68,-127,-97,89,61,127,127,-114,-114,-127,123,127, -54,30,-62,-86,-119,-23,31,-36,127,-21,-74,34,57,-70,-25,-44,-37,-31,55,-72,57,-82,-39,-25,48,-7,-45,-57,16,-89,-35,19,29,-98,119,23,-36,-62,2,-14,36,54,11,-76,-58,-37,64,35, 
  /* [0][2][][] */ -62,-106,-33,-33,1,36,-6,-36,-37,-59,-16,61,77,-127,-127,-62,-43,-17,63,76,51,-32,-13,-61,32,-53,-12,-56,76,29,76,62,106,-27,-38,-8,-96,35,-18,31,9,37,16,-58,96,-77,3,30, 88,-74,-87,-84,81,20,6,-47,49,-71,-32,56,82,-26,17,93,-24,-31,77,120,80,-52,-19,-56,92,-65,-19,-98,-48,39,-44,112,-18,-49,68,8,-127,50,-14,-2,10,32,17,-68,127,-99,-13,40, -29,29,-42,-36,-79,-20,21,-12,60,-5,-14,33,32,-43,112,-28,-93,-6,31,59,73,-28,-1,-4,43,0,-5,-63,-12,28,-21,39,-90,-43,66,6,-21,21,28,-38,6,36,-6,-19,62,-36,-5,17, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0034194334875792265, 0.0030968666542321444, 0.0093271248042583466, 0.0042270151898264885, 0.0048946733586490154, 0.0087035633623600006, 0.0046635773032903671, 0.0023339574690908194, 0.0034010519739240408, 0.0013834597775712609, 0.0032990556210279465, 0.00093399512115865946, 0.0079756779596209526, 0.23551659286022186, 0.0032953971531242132, 0.0088829388841986656, 0.1168077290058136, 0.00083944969810545444, 0.003812494920566678, 0.0071089677512645721, 0.0040512215346097946, 0.0062727858312427998, 0.0049109905958175659, 0.0014796855393797159, 0.0044455640017986298, 0.004798106849193573, 0.001390993595123291, 0.0016725270543247461, 0.011811035685241222, 0.0020223907195031643, 0.0020416185725480318, 0.0088063692674040794, 0.011527828872203827, 0.00039061784627847373, 0.0034105274826288223, 0.0095449564978480339, 0.00068311335053294897, 0.018400603905320168, 0.0011249332455918193, 0.0037902486510574818, 0.0024884066078811884, 0.0096525056287646294, 0.004590251948684454, 0.00041911358130164444, 0.0064263986423611641, 0.0029554865323007107, 0.0076705995015799999, 0.0050493567250669003, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4073, 201, 10379, 6728, 7230, 7778, 12909, -46, 65, -348, 2504, 555, 13975, -93573600, 3703, 23826, -75537464, -135, -488, 15336, 4434, -24, 28, 476, 3982, -859, 77, 830, 3959, 1770, 2585, 15608, 4235, 377, 236, -2853, 480, 3724, -183, 14542, 2328, 15352, -461, -101, 16183, 181, 13956, 4337, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00050547631690278649, 0.00032527107396163046, 0.00030340062221512198, 0.00027444623992778361, 0.00027236173627898097, 0.00027247791877016425, 0.00030166321084834635, 0.0011572297662496567, 0.00039493574877269566, 0.0021656763274222612, 0.00059877295279875398, 0.0016010536346584558, 0.00015838607214391232, 1.7332203450237671e-09, 0.00071744841989129782, 0.00013909548579249531, 1.7332203450237671e-09, 0.0057066399604082108, 0.00037561831413768232, 0.00025104382075369358, 0.00023614740348421037, 0.0042132227681577206, 0.00032740418100729585, 0.0012752185575664043, 0.00095241115195676684, 0.00063693465199321508, 0.0021638344042003155, 0.0014911046018823981, 0.00027660158229991794, 0.0016593221807852387, 0.0011545406887307763, 0.00015021744184195995, 0.00017979726544581354, 0.0085651827976107597, 0.00045881743426434696, 0.000423518504248932, 0.0031749634072184563, 0.0003346266457810998, 0.0021456987597048283, 0.00023882951063569635, 0.0012215512106195092, 0.00014495117648039013, 0.00035041657974943519, 0.0079731279984116554, 0.0003112790291197598, 0.00046619903878308833, 0.00020130751363467425, 0.00019800491281785071, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 10,-127,53,-36,28,-16,-46,13, 
  /* [1][0][][] */ 79,96,-18,-115,31,0,-108,127, 
  /* [2][0][][] */ 28,12,-48,127,58,112,37,94, 
  /* [3][0][][] */ 85,67,-80,127,-85,-14,-2,18, 
  /* [4][0][][] */ -37,-102,64,12,9,10,-40,-127, 
  /* [5][0][][] */ 15,-8,-40,40,-12,-15,53,127, 
  /* [6][0][][] */ 44,-7,-127,-87,102,3,43,-33, 
  /* [7][0][][] */ 127,17,18,-31,27,-7,91,-65, 
  /* [8][0][][] */ 10,-81,20,101,-6,20,-15,-127, 
  /* [9][0][][] */ 89,-123,7,0,-11,20,-127,84, 
  /* [10][0][][] */ -127,-52,-112,25,-12,8,-109,51, 
  /* [11][0][][] */ -24,-41,-10,-112,-127,-32,45,-16, 
  /* [12][0][][] */ 17,8,-40,68,-76,-34,54,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ 1,-34,-13,15,51,127,43,40, 
  /* [15][0][][] */ 37,11,10,-127,64,38,-49,81, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 11,21,127,25,-30,-8,30,27, 
  /* [18][0][][] */ 91,-127,24,32,-4,25,-118,10, 
  /* [19][0][][] */ -127,-21,38,75,-73,-63,-105,69, 
  /* [20][0][][] */ 47,28,-40,106,-39,-127,6,69, 
  /* [21][0][][] */ 62,23,127,15,-14,-15,67,13, 
  /* [22][0][][] */ -73,-15,-127,-3,0,8,-87,2, 
  /* [23][0][][] */ -109,127,-13,-22,5,-5,126,-87, 
  /* [24][0][][] */ 1,-54,-55,85,-1,-54,101,127, 
  /* [25][0][][] */ 4,54,21,35,127,114,-71,-53, 
  /* [26][0][][] */ -86,-27,-127,-4,4,17,-93,2, 
  /* [27][0][][] */ -5,-28,-33,9,-38,127,68,51, 
  /* [28][0][][] */ 6,-16,-18,32,22,127,45,58, 
  /* [29][0][][] */ 80,34,127,-2,-29,-15,71,-6, 
  /* [30][0][][] */ -72,127,-20,-26,0,-5,95,-46, 
  /* [31][0][][] */ -41,-94,-23,0,19,-66,127,104, 
  /* [32][0][][] */ 12,7,-50,121,-13,100,80,127, 
  /* [33][0][][] */ -5,69,-10,-111,17,-10,-19,127, 
  /* [34][0][][] */ -21,76,-2,-108,34,-1,12,127, 
  /* [35][0][][] */ 127,12,-27,-67,20,66,112,-66, 
  /* [36][0][][] */ -127,-7,23,65,-26,10,-117,87, 
  /* [37][0][][] */ -6,-27,-8,17,20,127,53,55, 
  /* [38][0][][] */ 20,24,5,81,127,-12,-21,37, 
  /* [39][0][][] */ 1,31,35,-127,43,-8,-36,123, 
  /* [40][0][][] */ 100,21,127,0,-12,-3,92,-11, 
  /* [41][0][][] */ -3,-26,-32,102,64,127,77,110, 
  /* [42][0][][] */ -88,-15,127,14,-51,17,-22,60, 
  /* [43][0][][] */ -10,-47,13,104,-12,-1,7,-127, 
  /* [44][0][][] */ 44,2,-74,-127,99,-44,-26,-102, 
  /* [45][0][][] */ -95,127,-2,-48,10,6,74,-62, 
  /* [46][0][][] */ -127,-18,37,39,-15,55,-99,48, 
  /* [47][0][][] */ 106,16,112,1,17,-25,127,-8, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0011481889523565769, 0.00073885289020836353, 0.00068917416501790285, 0.0006234043394215405, 0.00061866937903687358, 0.00061893329257145524, 0.00068522762740030885, 0.0026286460924893618, 0.0008970961207523942, 0.0049193315207958221, 0.00136011210270226, 0.0036367916036397219, 0.0003597737813834101, 3.937008052901092e-09, 0.0016296833055093884, 0.00031595525797456503, 3.937008052901092e-09, 0.012962626293301582, 0.00085321656661108136, 0.00057024578563868999, 0.00053640856640413404, 0.0095703313127160072, 0.00074369821231812239, 0.0028966574463993311, 0.002163400873541832, 0.0014467963483184576, 0.0049151475541293621, 0.0033870425540953875, 0.00062830018578097224, 0.0037691486068069935, 0.0026225380133837461, 0.00034121875069104135, 0.00040840927977114916, 0.0194558035582304, 0.0010422032792121172, 0.00096202181885018945, 0.0072119259275496006, 0.00076010404154658318, 0.0048739523626863956, 0.00054250098764896393, 0.0027747522108256817, 0.00032925643608905375, 0.00079597090370953083, 0.018110951408743858, 0.00070706999395042658, 0.0010589705780148506, 0.00045726980897597969, 0.00044976794742979109, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -1788, -41824, -8298, -14238, -32197, -2652, -21858, -26405, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0020799175836145878, 0.002030274597927928, 0.0026045767590403557, 0.0010800168383866549, 0.0012264283141121268, 0.0021323985420167446, 0.0014737362507730722, 0.0010378536535426974, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-16,7,5,125,-3,-1,2,3,-127,-90,-3,0,117,-7,0, 
  /* [1][0][][] */ 0,-28,-1,83,72,11,22,6,-1,-6,127,-45,0,30,-14,0, 
  /* [2][0][][] */ 0,0,-1,-13,-58,4,9,6,2,3,-16,3,0,127,-8,0, 
  /* [3][0][][] */ 0,-5,-16,-127,93,20,74,8,-2,66,-2,45,0,1,15,0, 
  /* [4][0][][] */ 0,51,-15,34,-48,24,127,-3,3,-56,21,-5,0,-7,11,0, 
  /* [5][0][][] */ 0,-13,-4,-2,-20,-28,-9,9,-2,11,-6,-47,0,-6,127,0, 
  /* [6][0][][] */ 0,19,-5,-1,51,-27,-29,-12,2,-112,116,63,0,127,64,0, 
  /* [7][0][][] */ 0,16,-13,127,6,-4,19,2,-3,64,-52,77,0,-12,52,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.088396497070789337, 0.086286671459674835, 0.11069450527429581, 0.04590071365237236, 0.052123203873634338, 0.090626932680606842, 0.062633790075778961, 0.044108778238296509, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 22039, 76150, 10227, 8595, 32719, 11168, 96681, -3658, 6689, 28945, 15162, -445, 26861, 10950, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00011754614388337359, 5.2641360525740311e-05, 0.00034710654290392995, 0.0001962669484782964, 0.0001013455621432513, 0.00043690548045560718, 4.042603904963471e-05, 2.758046321105212e-05, 0.00026977682136930525, 0.00021048700727988034, 0.00084464822430163622, 0.00072724185883998871, 0.00023435341427102685, 0.00018831502529792488, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-83,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,87,-2,-72,68,-94,77,-95,-27,4,-15,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-24,13,-44,16,-28,13,-27,0,3,-108,-49,8,-29,-14, -78,-41,-59,-15,-8,-25,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,62,2,3,35,-25,33,-127,6,-2,2,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,65,2,-6,40,-39,51,-78,0,0,4,40,2,-27,23, 23,-4,28,-2,-27,41,-34,20,-127,-13,0,83,-58,0,-28,-111, 21,-7,17,0,4,15,9,21,-116,4,-1,-127,107,2,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0049957111477851868, 0.0022372577805072069, 0.014752027578651905, 0.0083413450047373772, 0.0043071862310171127, 0.018568482249975204, 0.0017181066796183586, 0.0011721696937456727, 0.011465514078736305, 0.0089456979185342789, 0.035897549241781235, 0.030907778069376945, 0.0099600199609994888, 0.0080033885315060616, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 18321, -71216, 27975, 333622, 17088, 28209, 6389, -74589, 25977, 25128, 299509, -1073741824, 55843, 86041, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00014367542462423444, 0.00025908485986292362, 3.7288635212462395e-05, 9.7430711321067065e-06, 0.00011011746391886845, 0.00010574956831987947, 0.0004327690985519439, 5.4970437304291409e-06, 6.5491076384205371e-05, 0.00011866310524055734, 1.8540324163041078e-05, 1.1533876076441629e-09, 6.8432462285272777e-05, 3.4319480619160458e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 48,-7,29, -3,-27,13, -123,-127,-71, 
  /* [1][1][][] */ 4,-9,-4, -19,-1,-8, 5,-36,2, 
  /* [1][2][][] */ -2,14,-5, -5,2,-7, 40,-24,8, 
  /* [2][0][][] */ 38,-8,-12, 83,112,-6, 32,-49,-1, 
  /* [2][1][][] */ 14,11,-6, 75,127,-33, 11,-13,-13, 
  /* [2][2][][] */ 57,-64,19, 81,-42,-23, 27,-60,10, 
  /* [3][0][][] */ 11,33,0, 39,98,19, -2,4,-5, 
  /* [3][1][][] */ 26,38,3, 72,127,22, -18,-23,0, 
  /* [3][2][][] */ 11,6,2, 28,20,0, -2,-5,0, 
  /* [4][0][][] */ 21,67,-8, 8,91,2, -14,28,20, 
  /* [4][1][][] */ 23,75,40, 20,115,33, 30,71,8, 
  /* [4][2][][] */ 54,75,26, 52,127,16, -13,41,36, 
  /* [5][0][][] */ 3,5,-113, -14,-7,-103, -17,19,-31, 
  /* [5][1][][] */ -1,-46,-124, -13,-61,-127, -14,1,-33, 
  /* [5][2][][] */ -9,9,-15, -9,-10,-13, -11,2,-19, 
  /* [6][0][][] */ 21,-63,36, 43,-89,41, 6,-21,10, 
  /* [6][1][][] */ 34,-95,65, 61,-127,75, 4,-27,20, 
  /* [6][2][][] */ 19,-32,17, 13,-42,29, -13,11,3, 
  /* [7][0][][] */ -28,21,7, -114,-44,-1, -12,35,13, 
  /* [7][1][][] */ -2,-3,5, -127,-103,-11, 5,4,15, 
  /* [7][2][][] */ -13,38,-6, -5,14,1, -11,36,6, 
  /* [8][0][][] */ 102,39,15, 102,38,18, 88,29,21, 
  /* [8][1][][] */ 104,38,13, 103,35,16, 89,27,18, 
  /* [8][2][][] */ 127,51,27, 126,50,30, 111,40,29, 
  /* [9][0][][] */ -11,-9,2, -7,-13,-8, 6,-3,-19, 
  /* [9][1][][] */ 112,110,-22, 92,127,3, -1,13,13, 
  /* [9][2][][] */ -25,-28,13, 4,-35,-5, 8,-2,-29, 
  /* [10][0][][] */ -25,-83,-18, 34,94,20, -9,-13,-2, 
  /* [10][1][][] */ -59,-103,-13, 79,127,15, -17,-26,0, 
  /* [10][2][][] */ -32,-19,2, 36,23,-11, -8,-1,8, 
  /* [11][0][][] */ 11,-10,7, 31,-26,12, 27,-78,-38, 
  /* [11][1][][] */ -26,-29,-12, -13,-46,-27, 4,-41,-39, 
  /* [11][2][][] */ 4,-25,-61, 119,127,70, -23,24,-32, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -52,-98,-18, -62,-112,-25, -10,-18,-6, 
  /* [13][1][][] */ 61,114,15, 57,127,24, 7,15,10, 
  /* [13][2][][] */ -9,-19,3, 1,-19,-2, 0,4,-4, 
  /* [14][0][][] */ 47,-6,-33, 82,-24,-45, 35,-8,-17, 
  /* [14][1][][] */ 88,-19,-72, 127,-41,-83, 58,-20,-35, 
  /* [14][2][][] */ 56,-9,-41, 74,-22,-49, 25,-10,-18, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.036637231707572937, 0.066066637635231018, 0.0095086013898253441, 0.0024844829458743334, 0.02807995118200779, 0.026966137811541557, 0.11035611480474472, 0.0014017460634931922, 0.016700223088264465, 0.030259089544415474, 0.0047277822159230709, 2.9411381774480105e-07, 0.017450276762247086, 0.0087514668703079224, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,64,64,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,64,64,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,64,64,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.44023793935775757, } };
const TfArray<1, int> quant46_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,64,64,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,65,65,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.43991741538047791, } };
const TfArray<1, int> quant50_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.53966695070266724, } };
const TfArray<1, int> quant53_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.58031660318374634, } };
const TfArray<1, int> quant54_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,33,33,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.33583524823188782, } };
const TfArray<1, int> quant58_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.17616438865661621, } };
const TfArray<1, int> quant61_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.33646225929260254, } };
const TfArray<1, int> quant62_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.23261377215385437, } };
const TfArray<1, int> quant65_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.4145209789276123, } };
const TfArray<1, int> quant66_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,16,16,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.048499919474124908, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,16,16,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.13485424220561981, } };
const TfArray<1, int> quant69_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,16,16,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 65536), (TfLiteIntArray*)&g0::tensor_dimension44, 65536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 65536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 65536), (TfLiteIntArray*)&g0::tensor_dimension46, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 202800), (TfLiteIntArray*)&g0::tensor_dimension47, 196608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 202800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 202800), (TfLiteIntArray*)&g0::tensor_dimension49, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 98304), (TfLiteIntArray*)&g0::tensor_dimension50, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension51, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension53, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension55, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 52272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension57, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64560), (TfLiteIntArray*)&g0::tensor_dimension58, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension59, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension61, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension62, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension63, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 28672), (TfLiteIntArray*)&g0::tensor_dimension65, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension66, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension68, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 512), (TfLiteIntArray*)&g0::tensor_dimension69, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
